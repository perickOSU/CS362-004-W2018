        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/* prototypes */
        -:    9:int cardEffect_CouncilRoom(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus);
        -:   10:int cardEffect_Smithy(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus);
        -:   11:int cardEffect_Adventurer(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus);
        -:   12:int cardEffect_Village(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus);
        -:   13:int cardEffect_GreatHall(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus);
        -:   14:
        -:   15:
        -:   16:
function compare called 122925 returned 100% blocks executed 83%
   122925:   17:int compare(const void* a, const void* b) {
   122925:   17-block  0
   122925:   18:	if (*(int*)a > *(int*)b)
   122925:   18-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 122925
    #####:   19:		return 1;
    $$$$$:   19-block  0
unconditional  0 never executed
   122925:   20:	if (*(int*)a < *(int*)b)
   122925:   20-block  0
branch  0 taken 32772 (fallthrough)
branch  1 taken 90153
    32772:   21:		return -1;
    32772:   21-block  0
unconditional  0 taken 32772
    90153:   22:	return 0;
    90153:   22-block  0
unconditional  0 taken 90153
        -:   23:}
        -:   24:
function newGame called 0 returned 0% blocks executed 0%
    #####:   25:struct gameState* newGame() {
    $$$$$:   25-block  0
    #####:   26:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   27:	return g;
    $$$$$:   27-block  0
unconditional  0 never executed
        -:   28:}
        -:   29:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   30-block  0
        -:   31:		int k8, int k9, int k10) {
    #####:   32:	int* k = malloc(10 * sizeof(int));
    #####:   33:	k[0] = k1;
    #####:   34:	k[1] = k2;
    #####:   35:	k[2] = k3;
    #####:   36:	k[3] = k4;
    #####:   37:	k[4] = k5;
    #####:   38:	k[5] = k6;
    #####:   39:	k[6] = k7;
    #####:   40:	k[7] = k8;
    #####:   41:	k[8] = k9;
    #####:   42:	k[9] = k10;
    #####:   43:	return k;
    $$$$$:   43-block  0
unconditional  0 never executed
        -:   44:}
        -:   45:
function initializeGame called 2549 returned 100% blocks executed 95%
     2549:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
     2549:   46-block  0
        -:   47:		struct gameState *state) {
        -:   48:
        -:   49:	int i;
        -:   50:	int j;
        -:   51:	int it;			
        -:   52:	//set up random number generator
     2549:   53:	SelectStream(1);
     2549:   53-block  0
call    0 returned 2549
     2549:   54:	PutSeed((long)randomSeed);
call    0 returned 2549
        -:   55:
        -:   56:	//check number of players
     2549:   57:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 2549 (fallthrough)
branch  1 taken 0
     2549:   57-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 2549
        -:   58:	{
    #####:   59:		return -1;
    $$$$$:   59-block  0
unconditional  0 never executed
        -:   60:	}
        -:   61:
        -:   62:	//set number of players
     2549:   63:	state->numPlayers = numPlayers;
        -:   64:
        -:   65:	//check selected kingdom cards are different
    28039:   66:	for (i = 0; i < 10; i++)
     2549:   66-block  0
unconditional  0 taken 2549
    25490:   66-block  1
unconditional  1 taken 25490
    28039:   66-block  2
branch  2 taken 25490
branch  3 taken 2549 (fallthrough)
        -:   67:	{
   280390:   68:		for (j = 0; j < 10; j++)
    25490:   68-block  0
unconditional  0 taken 25490
   254900:   68-block  1
unconditional  1 taken 254900
   280390:   68-block  2
branch  2 taken 254900
branch  3 taken 25490 (fallthrough)
        -:   69:		{
   254900:   70:			if (j != i && kingdomCards[j] == kingdomCards[i])
   254900:   70-block  0
branch  0 taken 229410 (fallthrough)
branch  1 taken 25490
   229410:   70-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 229410
        -:   71:			{
    #####:   72:				return -1;
    $$$$$:   72-block  0
unconditional  0 never executed
        -:   73:			}
        -:   74:		}
        -:   75:	}
        -:   76:
        -:   77:
        -:   78:	//initialize supply
        -:   79:	///////////////////////////////
        -:   80:
        -:   81:	//set number of Curse cards
     2549:   82:	if (numPlayers == 2)
     2549:   82-block  0
branch  0 taken 579 (fallthrough)
branch  1 taken 1970
        -:   83:	{
      579:   84:		state->supplyCount[curse] = 10;
      579:   84-block  0
unconditional  0 taken 579
        -:   85:	}
     1970:   86:	else if (numPlayers == 3)
     1970:   86-block  0
branch  0 taken 845 (fallthrough)
branch  1 taken 1125
        -:   87:	{
      845:   88:		state->supplyCount[curse] = 20;
      845:   88-block  0
unconditional  0 taken 845
        -:   89:	}
        -:   90:	else
        -:   91:	{
     1125:   92:		state->supplyCount[curse] = 30;
     1125:   92-block  0
unconditional  0 taken 1125
        -:   93:	}
        -:   94:
        -:   95:	//set number of Victory cards
     2549:   96:	if (numPlayers == 2)
     2549:   96-block  0
branch  0 taken 579 (fallthrough)
branch  1 taken 1970
        -:   97:	{
      579:   98:		state->supplyCount[estate] = 8;
      579:   99:		state->supplyCount[duchy] = 8;
      579:  100:		state->supplyCount[province] = 8;
      579:  100-block  0
unconditional  0 taken 579
        -:  101:	}
        -:  102:	else
        -:  103:	{
     1970:  104:		state->supplyCount[estate] = 12;
     1970:  105:		state->supplyCount[duchy] = 12;
     1970:  106:		state->supplyCount[province] = 12;
     1970:  106-block  0
unconditional  0 taken 1970
        -:  107:	}
        -:  108:
        -:  109:	//set number of Treasure cards
     2549:  110:	state->supplyCount[copper] = 60 - (7 * numPlayers);
     2549:  111:	state->supplyCount[silver] = 40;
     2549:  112:	state->supplyCount[gold] = 30;
        -:  113:
        -:  114:	//set number of Kingdom cards
    53529:  115:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
     2549:  115-block  0
unconditional  0 taken 2549
    50980:  115-block  1
unconditional  1 taken 50980
    53529:  115-block  2
branch  2 taken 50980
branch  3 taken 2549 (fallthrough)
        -:  116:	{
   420585:  117:		for (j = 0; j < 10; j++)           		//loop chosen cards
    50980:  117-block  0
unconditional  0 taken 50980
   369605:  117-block  1
unconditional  1 taken 369605
   420585:  117-block  2
branch  2 taken 395095
branch  3 taken 25490 (fallthrough)
        -:  118:		{
   395095:  119:			if (kingdomCards[j] == i)
   395095:  119-block  0
branch  0 taken 25490 (fallthrough)
branch  1 taken 369605
        -:  120:			{
        -:  121:				//check if card is a 'Victory' Kingdom card
    25490:  122:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    25490:  122-block  0
branch  0 taken 22941 (fallthrough)
branch  1 taken 2549
    22941:  122-block  1
branch  2 taken 2549 (fallthrough)
branch  3 taken 20392
        -:  123:				{
    10196:  124:					if (numPlayers == 2){ 
     5098:  124-block  0
branch  0 taken 1158 (fallthrough)
branch  1 taken 3940
     5098:  124-block  1
unconditional  2 taken 5098
     1158:  125:						state->supplyCount[i] = 8; 
     1158:  125-block  0
unconditional  0 taken 1158
        -:  126:					}
     3940:  127:					else{ state->supplyCount[i] = 12; }
     3940:  127-block  0
unconditional  0 taken 3940
        -:  128:				}
        -:  129:				else
        -:  130:				{
    20392:  131:					state->supplyCount[i] = 10;
    20392:  131-block  0
unconditional  0 taken 20392
        -:  132:				}
    25490:  133:				break;
    25490:  133-block  0
unconditional  0 taken 25490
        -:  134:			}
        -:  135:			else    //card is not in the set choosen for the game
        -:  136:			{
   369605:  137:				state->supplyCount[i] = -1;
        -:  138:			}
        -:  139:		}
        -:  140:
        -:  141:	}
        -:  142:
        -:  143:	////////////////////////
        -:  144:	//supply intilization complete
        -:  145:
        -:  146:	//set player decks
    10742:  147:	for (i = 0; i < numPlayers; i++)
     2549:  147-block  0
unconditional  0 taken 2549
     8193:  147-block  1
unconditional  1 taken 8193
    10742:  147-block  2
branch  2 taken 8193
branch  3 taken 2549 (fallthrough)
        -:  148:	{
     8193:  149:		state->deckCount[i] = 0;
    32772:  150:		for (j = 0; j < 3; j++)
     8193:  150-block  0
unconditional  0 taken 8193
    24579:  150-block  1
unconditional  1 taken 24579
    32772:  150-block  2
branch  2 taken 24579
branch  3 taken 8193 (fallthrough)
        -:  151:		{
    24579:  152:			state->deck[i][j] = estate;
    24579:  153:			state->deckCount[i]++;
        -:  154:		}
    65544:  155:		for (j = 3; j < 10; j++)
     8193:  155-block  0
unconditional  0 taken 8193
    57351:  155-block  1
unconditional  1 taken 57351
    65544:  155-block  2
branch  2 taken 57351
branch  3 taken 8193 (fallthrough)
        -:  156:		{
    57351:  157:			state->deck[i][j] = copper;
    57351:  158:			state->deckCount[i]++;		
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//shuffle player decks
    10742:  163:	for (i = 0; i < numPlayers; i++)
     2549:  163-block  0
unconditional  0 taken 2549
     8193:  163-block  1
unconditional  1 taken 8193
    10742:  163-block  2
branch  2 taken 8193
branch  3 taken 2549 (fallthrough)
        -:  164:	{
     8193:  165:		if ( shuffle(i, state) < 0 )
     8193:  165-block  0
call    0 returned 8193
branch  1 taken 0 (fallthrough)
branch  2 taken 8193
        -:  166:		{
    #####:  167:			return -1;
    $$$$$:  167-block  0
unconditional  0 never executed
        -:  168:		}
        -:  169:	}
        -:  170:
        -:  171:	//draw player hands
    10742:  172:	for (i = 0; i < numPlayers; i++)
     2549:  172-block  0
unconditional  0 taken 2549
     8193:  172-block  1
unconditional  1 taken 8193
    10742:  172-block  2
branch  2 taken 8193
branch  3 taken 2549 (fallthrough)
        -:  173:	{  
        -:  174:		//initialize hand size to zero
     8193:  175:		state->handCount[i] = 0;
     8193:  176:		state->discardCount[i] = 0;
        -:  177:		//draw 5 cards
        -:  178:		// for (j = 0; j < 5; j++)
        -:  179:		//	{
        -:  180:		//	  drawCard(i, state);
        -:  181:		//	}
        -:  182:	}
        -:  183:
        -:  184:	//set embargo tokens to 0 for all supply piles
    71372:  185:	for (i = 0; i <= treasure_map; i++)
     2549:  185-block  0
unconditional  0 taken 2549
    68823:  185-block  1
unconditional  1 taken 68823
    71372:  185-block  2
branch  2 taken 68823
branch  3 taken 2549 (fallthrough)
        -:  186:	{
    68823:  187:		state->embargoTokens[i] = 0;
        -:  188:	}
        -:  189:
        -:  190:	//initialize first player's turn
     2549:  191:	state->outpostPlayed = 0;
     2549:  192:	state->phase = 0;
     2549:  193:	state->numActions = 1;
     2549:  194:	state->numBuys = 1;
     2549:  195:	state->playedCardCount = 0;
     2549:  196:	state->whoseTurn = 0;
     2549:  197:	state->handCount[state->whoseTurn] = 0;
        -:  198:	//int it; move to top
        -:  199:
        -:  200:	//Moved draw cards to here, only drawing at the start of a turn
    15294:  201:	for (it = 0; it < 5; it++){
     2549:  201-block  0
unconditional  0 taken 2549
unconditional  1 taken 12745
    15294:  201-block  1
branch  2 taken 12745
branch  3 taken 2549 (fallthrough)
    12745:  202:		drawCard(state->whoseTurn, state);
    12745:  202-block  0
call    0 returned 12745
        -:  203:	}
        -:  204:
     2549:  205:	updateCoins(state->whoseTurn, state, 0);
     2549:  205-block  0
call    0 returned 2549
        -:  206:
     2549:  207:	return 0;
unconditional  0 taken 2549
        -:  208:}
        -:  209:
function shuffle called 8219 returned 100% blocks executed 100%
     8219:  210:int shuffle(int player, struct gameState *state) {
     8219:  210-block  0
        -:  211:
        -:  212:
        -:  213:	int newDeck[MAX_DECK];
     8219:  214:	int newDeckPos = 0;
        -:  215:	int card;
        -:  216:	int i;
        -:  217:
     8219:  218:	if (state->deckCount[player] < 1)
     8219:  218-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 8195
       24:  219:		return -1;
       24:  219-block  0
unconditional  0 taken 24
     8195:  220:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
     8195:  220-block  0
call    0 returned 8195
        -:  221:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
    90145:  223:	while (state->deckCount[player] > 0) {
unconditional  0 taken 8195
    90145:  223-block  0
branch  1 taken 81950
branch  2 taken 8195 (fallthrough)
    81950:  224:		card = floor(Random() * state->deckCount[player]);
    81950:  224-block  0
call    0 returned 81950
    81950:  225:		newDeck[newDeckPos] = state->deck[player][card];
    81950:  226:		newDeckPos++;
   285700:  227:		for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 81950
   203750:  227-block  0
unconditional  1 taken 203750
   285700:  227-block  1
branch  2 taken 203750
branch  3 taken 81950 (fallthrough)
   203750:  228:			state->deck[player][i] = state->deck[player][i+1];
        -:  229:		}
    81950:  230:		state->deckCount[player]--;
    81950:  230-block  0
unconditional  0 taken 81950
        -:  231:	}
    90145:  232:	for (i = 0; i < newDeckPos; i++) {
     8195:  232-block  0
unconditional  0 taken 8195
    81950:  232-block  1
unconditional  1 taken 81950
    90145:  232-block  2
branch  2 taken 81950
branch  3 taken 8195 (fallthrough)
    81950:  233:		state->deck[player][i] = newDeck[i];
    81950:  234:		state->deckCount[player]++;
        -:  235:	}
        -:  236:
     8219:  237:	return 0;
     8195:  237-block  0
unconditional  0 taken 8195
     8219:  237-block  1
unconditional  1 taken 8219
        -:  238:}
        -:  239:
function playCard called 0 returned 0% blocks executed 0%
    #####:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  240-block  0
        -:  241:{	
        -:  242:	int card;
    #####:  243:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  244:
        -:  245:	//check if it is the right phase
    #####:  246:	if (state->phase != 0)
    $$$$$:  246-block  0
branch  0 never executed
branch  1 never executed
        -:  247:	{
    #####:  248:		return -1;
    $$$$$:  248-block  0
unconditional  0 never executed
        -:  249:	}
        -:  250:
        -:  251:	//check if player has enough actions
    #####:  252:	if ( state->numActions < 1 )
    $$$$$:  252-block  0
branch  0 never executed
branch  1 never executed
        -:  253:	{
    #####:  254:		return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:	}
        -:  256:
        -:  257:	//get card played
    #####:  258:	card = handCard(handPos, state);
    $$$$$:  258-block  0
call    0 never executed
        -:  259:
        -:  260:	//check if selected card is an action
    #####:  261:	if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  261-block  0
branch  2 never executed
branch  3 never executed
        -:  262:	{
    #####:  263:		return -1;
    $$$$$:  263-block  0
unconditional  0 never executed
        -:  264:	}
        -:  265:
        -:  266:	//play card
    #####:  267:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  267-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  268:	{
    #####:  269:		return -1;
    $$$$$:  269-block  0
unconditional  0 never executed
        -:  270:	}
        -:  271:
        -:  272:	//reduce number of actions
    #####:  273:	state->numActions--;
        -:  274:
        -:  275:	//update coins (Treasure cards may be added with card draws)
    #####:  276:	updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  276-block  0
call    0 never executed
        -:  277:
    #####:  278:	return 0;
unconditional  0 never executed
    $$$$$:  278-block  0
unconditional  1 never executed
        -:  279:}
        -:  280:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  281:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  281-block  0
    $$$$$:  281-block  1
unconditional  0 never executed
        -:  282:	int who;
        -:  283:	if (DEBUG){
        -:  284:		printf("Entering buyCard...\n");
        -:  285:	}
        -:  286:
        -:  287:	// I don't know what to do about the phase thing.
        -:  288:
    #####:  289:	who = state->whoseTurn;
        -:  290:
    #####:  291:	if (state->numBuys < 1){
    $$$$$:  291-block  0
branch  0 never executed
branch  1 never executed
        -:  292:		if (DEBUG)
        -:  293:			printf("You do not have any buys left\n");
    #####:  294:		return -1;
    $$$$$:  294-block  0
unconditional  0 never executed
    #####:  295:	} else if (supplyCount(supplyPos, state) <1){
    $$$$$:  295-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  296:		if (DEBUG)
        -:  297:			printf("There are not any of that type of card left\n");
    #####:  298:		return -1;
    $$$$$:  298-block  0
unconditional  0 never executed
    #####:  299:	} else if (state->coins < getCost(supplyPos)){
    $$$$$:  299-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  300:		if (DEBUG) 
        -:  301:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:		return -1;
    $$$$$:  302-block  0
unconditional  0 never executed
        -:  303:	} else {
    #####:  304:		state->phase=1;
        -:  305:		//state->supplyCount[supplyPos]--;
    #####:  306:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  306-block  0
call    0 never executed
        -:  307:
    #####:  308:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  309:		state->numBuys--;
unconditional  0 never executed
        -:  310:		if (DEBUG)
        -:  311:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:	}
        -:  313:
        -:  314:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:	//state->discardCount[who]++;
        -:  316:
    #####:  317:	return 0;
    $$$$$:  317-block  0
unconditional  0 never executed
        -:  318:}
        -:  319:
function numHandCards called 42 returned 100% blocks executed 100%
       42:  320:int numHandCards(struct gameState *state) {
       42:  320-block  0
       42:  321:	return state->handCount[ whoseTurn(state) ];
       42:  321-block  0
call    0 returned 42
unconditional  1 taken 42
        -:  322:}
        -:  323:
function handCard called 0 returned 0% blocks executed 0%
    #####:  324:int handCard(int handPos, struct gameState *state) {
    $$$$$:  324-block  0
    #####:  325:	int currentPlayer = whoseTurn(state);
    $$$$$:  325-block  0
call    0 never executed
    #####:  326:	return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  327:}
        -:  328:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  329:int supplyCount(int card, struct gameState *state) {
    $$$$$:  329-block  0
    #####:  330:	return state->supplyCount[card];
    $$$$$:  330-block  0
unconditional  0 never executed
        -:  331:}
        -:  332:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  333:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  333-block  0
        -:  334:	int i;
    #####:  335:	int count = 0;
        -:  336:
    #####:  337:	for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  337-block  0
unconditional  0 never executed
    $$$$$:  337-block  1
unconditional  1 never executed
    $$$$$:  337-block  2
branch  2 never executed
branch  3 never executed
        -:  338:	{
    #####:  339:		if (state->deck[player][i] == card) count++;
    $$$$$:  339-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  339-block  1
unconditional  2 never executed
        -:  340:	}
        -:  341:
    #####:  342:	for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  342-block  0
unconditional  0 never executed
    $$$$$:  342-block  1
unconditional  1 never executed
    $$$$$:  342-block  2
branch  2 never executed
branch  3 never executed
        -:  343:	{
    #####:  344:		if (state->hand[player][i] == card) count++;
    $$$$$:  344-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  344-block  1
unconditional  2 never executed
        -:  345:	}
        -:  346:
    #####:  347:	for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  347-block  0
unconditional  0 never executed
    $$$$$:  347-block  1
unconditional  1 never executed
    $$$$$:  347-block  2
branch  2 never executed
branch  3 never executed
        -:  348:	{
    #####:  349:		if (state->discard[player][i] == card) count++;
    $$$$$:  349-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  349-block  1
unconditional  2 never executed
        -:  350:	}
        -:  351:
    #####:  352:	return count;
    $$$$$:  352-block  0
unconditional  0 never executed
        -:  353:}
        -:  354:
function whoseTurn called 148 returned 100% blocks executed 100%
      148:  355:int whoseTurn(struct gameState *state) {
      148:  355-block  0
      148:  356:	return state->whoseTurn;
      148:  356-block  0
unconditional  0 taken 148
        -:  357:}
        -:  358:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  359:int endTurn(struct gameState *state) {
    $$$$$:  359-block  0
        -:  360:	int k;
        -:  361:	int i;
    #####:  362:	int currentPlayer = whoseTurn(state);
    $$$$$:  362-block  0
call    0 never executed
        -:  363:
        -:  364:	//Discard hand
    #####:  365:	for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  365-block  0
unconditional  1 never executed
    $$$$$:  365-block  1
branch  2 never executed
branch  3 never executed
    #####:  366:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  367:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  368:	}
    #####:  369:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  370:
        -:  371:	//Code for determining the player
    #####:  372:	if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  372-block  0
branch  0 never executed
branch  1 never executed
    #####:  373:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  373-block  0
unconditional  0 never executed
        -:  374:	}
        -:  375:	else{
    #####:  376:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  376-block  0
unconditional  0 never executed
        -:  377:	}
        -:  378:
    #####:  379:	state->outpostPlayed = 0;
    #####:  380:	state->phase = 0;
    #####:  381:	state->numActions = 1;
    #####:  382:	state->coins = 0;
    #####:  383:	state->numBuys = 1;
    #####:  384:	state->playedCardCount = 0;
    #####:  385:	state->handCount[state->whoseTurn] = 0;
        -:  386:
        -:  387:	//int k; move to top
        -:  388:	//Next player draws hand
    #####:  389:	for (k = 0; k < 5; k++){
    $$$$$:  389-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  389-block  1
branch  2 never executed
branch  3 never executed
    #####:  390:		drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  390-block  0
call    0 never executed
        -:  391:	}
        -:  392:
        -:  393:	//Update money
    #####:  394:	updateCoins(state->whoseTurn, state , 0);
    $$$$$:  394-block  0
call    0 never executed
        -:  395:
    #####:  396:	return 0;
unconditional  0 never executed
        -:  397:}
        -:  398:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  399:int isGameOver(struct gameState *state) {
    $$$$$:  399-block  0
        -:  400:	int i;
        -:  401:	int j;
        -:  402:
        -:  403:	//if stack of Province cards is empty, the game ends
    #####:  404:	if (state->supplyCount[province] == 0)
    $$$$$:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:		return 1;
    $$$$$:  406-block  0
unconditional  0 never executed
        -:  407:	}
        -:  408:
        -:  409:	//if three supply pile are at 0, the game ends
    #####:  410:	j = 0;
    #####:  411:	for (i = 0; i < 25; i++)
    $$$$$:  411-block  0
unconditional  0 never executed
    $$$$$:  411-block  1
unconditional  1 never executed
    $$$$$:  411-block  2
branch  2 never executed
branch  3 never executed
        -:  412:	{
    #####:  413:		if (state->supplyCount[i] == 0)
    $$$$$:  413-block  0
branch  0 never executed
branch  1 never executed
        -:  414:		{
    #####:  415:			j++;
    $$$$$:  415-block  0
unconditional  0 never executed
        -:  416:		}
        -:  417:	}
    #####:  418:	if ( j >= 3)
    $$$$$:  418-block  0
branch  0 never executed
branch  1 never executed
        -:  419:	{
    #####:  420:		return 1;
    $$$$$:  420-block  0
unconditional  0 never executed
        -:  421:	}
        -:  422:
    #####:  423:	return 0;
    $$$$$:  423-block  0
unconditional  0 never executed
        -:  424:}
        -:  425:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  426:int scoreFor (int player, struct gameState *state) {
    $$$$$:  426-block  0
        -:  427:
        -:  428:	int i;
    #####:  429:	int score = 0;
        -:  430:	//score from hand
    #####:  431:	for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  431-block  0
unconditional  0 never executed
    $$$$$:  431-block  1
unconditional  1 never executed
    $$$$$:  431-block  2
branch  2 never executed
branch  3 never executed
        -:  432:	{
    #####:  433:		if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  433-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  433-block  1
unconditional  2 never executed
    #####:  434:		if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  434-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  434-block  1
unconditional  2 never executed
    #####:  435:		if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:		if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
call    2 never executed
unconditional  3 never executed
        -:  439:	}
        -:  440:
        -:  441:	//score from discard
    #####:  442:	for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  442-block  0
unconditional  0 never executed
    $$$$$:  442-block  1
unconditional  1 never executed
    $$$$$:  442-block  2
branch  2 never executed
branch  3 never executed
        -:  443:	{
    #####:  444:		if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  444-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  444-block  1
unconditional  2 never executed
    #####:  445:		if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  445-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  445-block  1
unconditional  2 never executed
    #####:  446:		if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:		if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
call    2 never executed
unconditional  3 never executed
        -:  450:	}
        -:  451:
        -:  452:	//score from deck
    #####:  453:	for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  453-block  0
unconditional  0 never executed
    $$$$$:  453-block  1
unconditional  1 never executed
    $$$$$:  453-block  2
branch  2 never executed
branch  3 never executed
        -:  454:	{
    #####:  455:		if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  455-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  455-block  1
unconditional  2 never executed
    #####:  456:		if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  456-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  456-block  1
unconditional  2 never executed
    #####:  457:		if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  457-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  457-block  1
unconditional  2 never executed
    #####:  458:		if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  458-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  458-block  1
unconditional  2 never executed
    #####:  459:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  459-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  459-block  1
unconditional  2 never executed
    #####:  460:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  460-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  460-block  1
call    2 never executed
unconditional  3 never executed
        -:  461:	}
        -:  462:
    #####:  463:	return score;
    $$$$$:  463-block  0
unconditional  0 never executed
        -:  464:}
        -:  465:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  466:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  466-block  0
        -:  467:	int i;	
        -:  468:	int j;
        -:  469:	int highScore;
        -:  470:	int currentPlayer;
        -:  471:
        -:  472:	//get score for each player
    #####:  473:	for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  473-block  0
unconditional  0 never executed
    $$$$$:  473-block  1
unconditional  1 never executed
    $$$$$:  473-block  2
branch  2 never executed
branch  3 never executed
        -:  474:	{
        -:  475:		//set unused player scores to -9999
    #####:  476:		if (i >= state->numPlayers)
    $$$$$:  476-block  0
branch  0 never executed
branch  1 never executed
        -:  477:		{
    #####:  478:			players[i] = -9999;
    $$$$$:  478-block  0
unconditional  0 never executed
        -:  479:		}
        -:  480:		else
        -:  481:		{
    #####:  482:			players[i] = scoreFor (i, state);
    $$$$$:  482-block  0
call    0 never executed
unconditional  1 never executed
        -:  483:		}
        -:  484:	}
        -:  485:
        -:  486:	//find highest score
    #####:  487:	j = 0;
    #####:  488:	for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  488-block  0
unconditional  0 never executed
    $$$$$:  488-block  1
unconditional  1 never executed
    $$$$$:  488-block  2
branch  2 never executed
branch  3 never executed
        -:  489:	{
    #####:  490:		if (players[i] > players[j])
    $$$$$:  490-block  0
branch  0 never executed
branch  1 never executed
        -:  491:		{
    #####:  492:			j = i;
    $$$$$:  492-block  0
unconditional  0 never executed
        -:  493:		}
        -:  494:	}
    #####:  495:	highScore = players[j];
        -:  496:
        -:  497:	//add 1 to players who had less turns
    #####:  498:	currentPlayer = whoseTurn(state);
    $$$$$:  498-block  0
call    0 never executed
    #####:  499:	for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  499-block  0
unconditional  1 never executed
    $$$$$:  499-block  1
branch  2 never executed
branch  3 never executed
        -:  500:	{
    #####:  501:		if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  501-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  501-block  1
branch  2 never executed
branch  3 never executed
        -:  502:		{
    #####:  503:			players[i]++;
    $$$$$:  503-block  0
unconditional  0 never executed
        -:  504:		}
        -:  505:	}
        -:  506:
        -:  507:	//find new highest score
    #####:  508:	j = 0;
    #####:  509:	for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  509-block  0
unconditional  0 never executed
    $$$$$:  509-block  1
unconditional  1 never executed
    $$$$$:  509-block  2
branch  2 never executed
branch  3 never executed
        -:  510:	{
    #####:  511:		if ( players[i] > players[j] )
    $$$$$:  511-block  0
branch  0 never executed
branch  1 never executed
        -:  512:		{
    #####:  513:			j = i;
    $$$$$:  513-block  0
unconditional  0 never executed
        -:  514:		}
        -:  515:	}
    #####:  516:	highScore = players[j];
        -:  517:
        -:  518:	//set winners in array to 1 and rest to 0
    #####:  519:	for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  519-block  0
unconditional  0 never executed
    $$$$$:  519-block  1
unconditional  1 never executed
    $$$$$:  519-block  2
branch  2 never executed
branch  3 never executed
        -:  520:	{
    #####:  521:		if ( players[i] == highScore )
    $$$$$:  521-block  0
branch  0 never executed
branch  1 never executed
        -:  522:		{
    #####:  523:			players[i] = 1;
    $$$$$:  523-block  0
unconditional  0 never executed
        -:  524:		}
        -:  525:		else
        -:  526:		{
    #####:  527:			players[i] = 0;
    $$$$$:  527-block  0
unconditional  0 never executed
        -:  528:		}
        -:  529:	}
        -:  530:
    #####:  531:	return 0;
    $$$$$:  531-block  0
unconditional  0 never executed
        -:  532:}
        -:  533:
function drawCard called 13530 returned 100% blocks executed 100%
    13530:  534:int drawCard(int player, struct gameState *state)
    13530:  534-block  0
        -:  535:{	int count;
        -:  536:	int deckCounter;
    13530:  537:	if (state->deckCount[player] <= 0){//Deck is empty
    13530:  537-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 13516
        -:  538:
        -:  539:		//Step 1 Shuffle the discard pile back into a deck
        -:  540:		int i;
        -:  541:		//Move discard to deck
       34:  542:		for (i = 0; i < state->discardCount[player];i++){
       14:  542-block  0
unconditional  0 taken 14
       20:  542-block  1
unconditional  1 taken 20
       34:  542-block  2
branch  2 taken 20
branch  3 taken 14 (fallthrough)
       20:  543:			state->deck[player][i] = state->discard[player][i];
       20:  544:			state->discard[player][i] = -1;
        -:  545:		}
        -:  546:
       14:  547:		state->deckCount[player] = state->discardCount[player];
       14:  548:		state->discardCount[player] = 0;//Reset discard
        -:  549:
        -:  550:		//Shufffle the deck
       14:  551:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
       14:  551-block  0
call    0 returned 14
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  555:		}
        -:  556:
       14:  557:		state->discardCount[player] = 0;
        -:  558:
        -:  559:		//Step 2 Draw Card
       14:  560:		count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 14
        -:  561:
        -:  562:		if (DEBUG){//Debug statements
        -:  563:			printf("Current hand count: %d\n", count);
        -:  564:		}
        -:  565:
       14:  566:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  567:
       14:  568:		if (deckCounter == 0)
       14:  568-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 2
       12:  569:			return -1;
       12:  569-block  0
unconditional  0 taken 12
        -:  570:
        2:  571:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  572:		state->deckCount[player]--;
        2:  573:		state->handCount[player]++;//Increment hand count
        2:  573-block  0
unconditional  0 taken 2
        -:  574:	}
        -:  575:
        -:  576:	else{
    13516:  577:		int count = state->handCount[player];//Get current hand count for player
    13516:  577-block  0
unconditional  0 taken 13516
        -:  578:		int deckCounter;
        -:  579:		if (DEBUG){//Debug statements
        -:  580:			printf("Current hand count: %d\n", count);
        -:  581:		}
        -:  582:
    13516:  583:		deckCounter = state->deckCount[player];//Create holder for the deck count
    13516:  584:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    13516:  585:		state->deckCount[player]--;
    13516:  586:		state->handCount[player]++;//Increment hand count
    13516:  586-block  0
unconditional  0 taken 13516
        -:  587:	}
        -:  588:
    13518:  589:	return 0;
    13518:  589-block  0
unconditional  0 taken 13518
        -:  590:}
        -:  591:
function getCost called 28 returned 100% blocks executed 100%
       28:  592:int getCost(int cardNumber)
       28:  592-block  0
        -:  593:{
       28:  594:	switch( cardNumber ) 
       28:  594-block  0
branch  0 taken 1
branch  1 taken 1
branch  2 taken 1
branch  3 taken 1
branch  4 taken 1
branch  5 taken 1
branch  6 taken 1
branch  7 taken 1
branch  8 taken 1
branch  9 taken 1
branch 10 taken 1
branch 11 taken 1
branch 12 taken 1
branch 13 taken 1
branch 14 taken 1
branch 15 taken 1
branch 16 taken 1
branch 17 taken 1
branch 18 taken 1
branch 19 taken 1
branch 20 taken 1
branch 21 taken 1
branch 22 taken 1
branch 23 taken 1
branch 24 taken 1
branch 25 taken 1
branch 26 taken 1
branch 27 taken 1
        -:  595:	{
        -:  596:		case curse:
        1:  597:			return 0;
        1:  597-block  0
unconditional  0 taken 1
        -:  598:		case estate:
        1:  599:			return 2;
        1:  599-block  0
unconditional  0 taken 1
        -:  600:		case duchy:
        1:  601:			return 5;
        1:  601-block  0
unconditional  0 taken 1
        -:  602:		case province:
        1:  603:			return 8;
        1:  603-block  0
unconditional  0 taken 1
        -:  604:		case copper:
        1:  605:			return 0;
        1:  605-block  0
unconditional  0 taken 1
        -:  606:		case silver:
        1:  607:			return 3;
        1:  607-block  0
unconditional  0 taken 1
        -:  608:		case gold:
        1:  609:			return 6;
        1:  609-block  0
unconditional  0 taken 1
        -:  610:		case adventurer:
        1:  611:			return 6;
        1:  611-block  0
unconditional  0 taken 1
        -:  612:		case council_room:
        1:  613:			return 5;
        1:  613-block  0
unconditional  0 taken 1
        -:  614:		case feast:
        1:  615:			return 4;
        1:  615-block  0
unconditional  0 taken 1
        -:  616:		case gardens:
        1:  617:			return 4;
        1:  617-block  0
unconditional  0 taken 1
        -:  618:		case mine:
        1:  619:			return 5;
        1:  619-block  0
unconditional  0 taken 1
        -:  620:		case remodel:
        1:  621:			return 4;
        1:  621-block  0
unconditional  0 taken 1
        -:  622:		case smithy:
        1:  623:			return 4;
        1:  623-block  0
unconditional  0 taken 1
        -:  624:		case village:
        1:  625:			return 3;
        1:  625-block  0
unconditional  0 taken 1
        -:  626:		case baron:
        1:  627:			return 4;
        1:  627-block  0
unconditional  0 taken 1
        -:  628:		case great_hall:
        1:  629:			return 3;
        1:  629-block  0
unconditional  0 taken 1
        -:  630:		case minion:
        1:  631:			return 5;
        1:  631-block  0
unconditional  0 taken 1
        -:  632:		case steward:
        1:  633:			return 3;
        1:  633-block  0
unconditional  0 taken 1
        -:  634:		case tribute:
        1:  635:			return 5;
        1:  635-block  0
unconditional  0 taken 1
        -:  636:		case ambassador:
        1:  637:			return 3;
        1:  637-block  0
unconditional  0 taken 1
        -:  638:		case cutpurse:
        1:  639:			return 4;
        1:  639-block  0
unconditional  0 taken 1
        -:  640:		case embargo: 
        1:  641:			return 2;
        1:  641-block  0
unconditional  0 taken 1
        -:  642:		case outpost:
        1:  643:			return 5;
        1:  643-block  0
unconditional  0 taken 1
        -:  644:		case salvager:
        1:  645:			return 4;
        1:  645-block  0
unconditional  0 taken 1
        -:  646:		case sea_hag:
        1:  647:			return 4;
        1:  647-block  0
unconditional  0 taken 1
        -:  648:		case treasure_map:
        1:  649:			return 4;
        1:  649-block  0
unconditional  0 taken 1
        -:  650:	}
        -:  651:
        1:  652:	return -1;
        1:  652-block  0
unconditional  0 taken 1
        -:  653:}
        -:  654:
function cardEffect called 50 returned 100% blocks executed 4%
       50:  655:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
       50:  655-block  0
        -:  656:{
        -:  657:	int i;
        -:  658:	int j;
        -:  659:	int k;
        -:  660:	int x;
        -:  661:	int index;
       50:  662:	int currentPlayer = whoseTurn(state);
       50:  662-block  0
call    0 returned 50
       50:  663:	int nextPlayer = currentPlayer + 1;
        -:  664:
       50:  665:	int tributeRevealedCards[2] = {-1, -1};
        -:  666:	int temphand[MAX_HAND];// moved above the if statement
       50:  667:	int drawntreasure=0;
        -:  668:	int cardDrawn;
       50:  669:	int z = 0;// this is the counter for the temp hand
        -:  670:
       50:  671:	if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 50
    #####:  672:		nextPlayer = 0;
    $$$$$:  672-block  0
unconditional  0 never executed
        -:  673:	}
        -:  674:
        -:  675:	//uses switch to select card and perform actions
       50:  676:	switch( card )
       50:  676-block  0
branch  0 taken 36
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 6
branch  7 taken 4
branch  8 taken 0
branch  9 taken 4
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  677:	{
        -:  678:		case adventurer:
       36:  679:			return cardEffect_Adventurer(choice1, choice2, choice3, state, handPos, bonus);			
       36:  679-block  0
call    0 returned 36
unconditional  1 taken 36
        -:  680:
        -:  681:		case council_room:
    #####:  682:			return cardEffect_CouncilRoom(choice1, choice2, choice3, state, handPos, bonus);
    $$$$$:  682-block  0
call    0 never executed
unconditional  1 never executed
        -:  683:
        -:  684:		case feast:
        -:  685:			//gain card with cost up to 5
        -:  686:			//Backup hand
    #####:  687:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  687-block  0
unconditional  0 never executed
    $$$$$:  687-block  1
unconditional  1 never executed
    $$$$$:  687-block  2
branch  2 never executed
branch  3 never executed
    #####:  688:				temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  689:				state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  690:			}
        -:  691:			//Backup hand
        -:  692:
        -:  693:			//Update Coins for Buy
    #####:  694:			updateCoins(currentPlayer, state, 5);
    $$$$$:  694-block  0
call    0 never executed
    #####:  695:			x = 1;//Condition to loop on
    #####:  696:			while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  696-block  0
branch  1 never executed
branch  2 never executed
    #####:  697:				if (supplyCount(choice1, state) <= 0){
    $$$$$:  697-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  698:					if (DEBUG)
        -:  699:						printf("None of that card left, sorry!\n");
        -:  700:
        -:  701:					if (DEBUG){
        -:  702:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  703:					}
        -:  704:				}
    #####:  705:				else if (state->coins < getCost(choice1)){
    $$$$$:  705-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  706:					printf("That card is too expensive!\n");
    $$$$$:  706-block  0
call    0 never executed
unconditional  1 never executed
        -:  707:
        -:  708:					if (DEBUG){
        -:  709:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  710:					}
        -:  711:				}
        -:  712:				else{
        -:  713:					if (DEBUG){
        -:  714:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  715:					}
        -:  716:
    #####:  717:					gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  717-block  0
call    0 never executed
    #####:  718:					x = 0;//No more buying cards
unconditional  0 never executed
        -:  719:
        -:  720:					if (DEBUG){
        -:  721:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  722:					}
        -:  723:				}
        -:  724:			}     
        -:  725:
        -:  726:			//Reset Hand
    #####:  727:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  727-block  0
unconditional  0 never executed
    $$$$$:  727-block  1
unconditional  1 never executed
    $$$$$:  727-block  2
branch  2 never executed
branch  3 never executed
    #####:  728:				state->hand[currentPlayer][i] = temphand[i];
    #####:  729:				temphand[i] = -1;
        -:  730:			}
        -:  731:			//Reset Hand
        -:  732:
    #####:  733:			return 0;
    $$$$$:  733-block  0
unconditional  0 never executed
        -:  734:
        -:  735:		case gardens:
    #####:  736:			return -1;
    $$$$$:  736-block  0
unconditional  0 never executed
        -:  737:
        -:  738:		case mine:
    #####:  739:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  740:
    #####:  741:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  741-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  741-block  1
branch  2 never executed
branch  3 never executed
        -:  742:			{
    #####:  743:				return -1;
    $$$$$:  743-block  0
unconditional  0 never executed
        -:  744:			}
        -:  745:
    #####:  746:			if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  746-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  746-block  1
branch  2 never executed
branch  3 never executed
        -:  747:			{
    #####:  748:				return -1;
    $$$$$:  748-block  0
unconditional  0 never executed
        -:  749:			}
        -:  750:
    #####:  751:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  751-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  752:			{
    #####:  753:				return -1;
    $$$$$:  753-block  0
unconditional  0 never executed
        -:  754:			}
        -:  755:
    #####:  756:			gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  756-block  0
call    0 never executed
        -:  757:
        -:  758:			//discard card from hand
    #####:  759:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  760:
        -:  761:			//discard trashed card
    #####:  762:			for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  762-block  0
unconditional  1 never executed
    $$$$$:  762-block  1
branch  2 never executed
branch  3 never executed
        -:  763:			{
    #####:  764:				if (state->hand[currentPlayer][i] == j)
    $$$$$:  764-block  0
branch  0 never executed
branch  1 never executed
        -:  765:				{
    #####:  766:					discardCard(i, currentPlayer, state, 0);			
    $$$$$:  766-block  0
call    0 never executed
    #####:  767:					break;
unconditional  0 never executed
        -:  768:				}
        -:  769:			}
        -:  770:
    #####:  771:			return 0;
    $$$$$:  771-block  0
unconditional  0 never executed
        -:  772:
        -:  773:		case remodel:
    #####:  774:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  775:
    #####:  776:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  776-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  777:			{
    #####:  778:				return -1;
    $$$$$:  778-block  0
unconditional  0 never executed
        -:  779:			}
        -:  780:
    #####:  781:			gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  781-block  0
call    0 never executed
        -:  782:
        -:  783:			//discard card from hand
    #####:  784:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  785:
        -:  786:			//discard trashed card
    #####:  787:			for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  787-block  0
unconditional  1 never executed
    $$$$$:  787-block  1
branch  2 never executed
branch  3 never executed
        -:  788:			{
    #####:  789:				if (state->hand[currentPlayer][i] == j)
    $$$$$:  789-block  0
branch  0 never executed
branch  1 never executed
        -:  790:				{
    #####:  791:					discardCard(i, currentPlayer, state, 0);			
    $$$$$:  791-block  0
call    0 never executed
    #####:  792:					break;
unconditional  0 never executed
        -:  793:				}
        -:  794:			}
        -:  795:
    #####:  796:			return 0;
    $$$$$:  796-block  0
unconditional  0 never executed
        -:  797:
        -:  798:		case smithy:
        6:  799:			return cardEffect_Smithy(choice1, choice2, choice3, state, handPos, bonus);
        6:  799-block  0
call    0 returned 6
unconditional  1 taken 6
        -:  800:
        -:  801:		case village:
        4:  802:			return cardEffect_Village(choice1, choice2, choice3, state, handPos, bonus);
        4:  802-block  0
call    0 returned 4
unconditional  1 taken 4
        -:  803:
        -:  804:		case baron:
    #####:  805:			state->numBuys++;//Increase buys by 1!
        -:  806:
    #####:  807:			if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  807-block  0
branch  0 never executed
branch  1 never executed
    #####:  808:				int p = 0;//Iterator for hand!
    #####:  809:				int card_not_discarded = 1;//Flag for discard set!
    #####:  810:				while(card_not_discarded){
    $$$$$:  810-block  0
unconditional  0 never executed
    $$$$$:  810-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  810-block  2
unconditional  3 never executed
    #####:  811:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  811-block  0
branch  0 never executed
branch  1 never executed
    #####:  812:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  813:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  814:						state->discardCount[currentPlayer]++;
    #####:  815:						for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  815-block  0
unconditional  0 never executed
    $$$$$:  815-block  1
unconditional  1 never executed
    $$$$$:  815-block  2
branch  2 never executed
branch  3 never executed
    #####:  816:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  817:						}
    #####:  818:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  819:						state->handCount[currentPlayer]--;
    #####:  820:						card_not_discarded = 0;//Exit the loop
    $$$$$:  820-block  0
unconditional  0 never executed
        -:  821:					}
    #####:  822:					else if (p > state->handCount[currentPlayer]){
    $$$$$:  822-block  0
branch  0 never executed
branch  1 never executed
        -:  823:						if(DEBUG) {
        -:  824:							printf("No estate cards in your hand, invalid choice\n");
        -:  825:							printf("Must gain an estate if there are any\n");
        -:  826:						}
    #####:  827:						if (supplyCount(estate, state) > 0){
    $$$$$:  827-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:							gainCard(estate, state, 0, currentPlayer);
    $$$$$:  828-block  0
call    0 never executed
    #####:  829:							state->supplyCount[estate]--;//Decrement estates
    #####:  830:							if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  831:								isGameOver(state);
    $$$$$:  831-block  0
call    0 never executed
unconditional  1 never executed
        -:  832:							}
        -:  833:						}
    #####:  834:						card_not_discarded = 0;//Exit the loop
    $$$$$:  834-block  0
unconditional  0 never executed
        -:  835:					}
        -:  836:
        -:  837:					else {
    #####:  838:						p++;//Next card
    $$$$$:  838-block  0
unconditional  0 never executed
        -:  839:					}
        -:  840:				}
        -:  841:			}
        -:  842:
        -:  843:			else{
    #####:  844:				if (supplyCount(estate, state) > 0){
    $$$$$:  844-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  845-block  0
call    0 never executed
    #####:  846:					state->supplyCount[estate]--;//Decrement Estates
    #####:  847:					if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  848:						isGameOver(state);
    $$$$$:  848-block  0
call    0 never executed
unconditional  1 never executed
        -:  849:					}
        -:  850:				}
        -:  851:			}
        -:  852:
    #####:  853:			return 0;
    $$$$$:  853-block  0
unconditional  0 never executed
        -:  854:
        -:  855:		case great_hall:
        4:  856:			return cardEffect_GreatHall(choice1, choice2, choice3, state, handPos, bonus);
        4:  856-block  0
call    0 returned 4
unconditional  1 taken 4
        -:  857:
        -:  858:		case minion:
        -:  859:			//+1 action
    #####:  860:			state->numActions++;
        -:  861:
        -:  862:			//discard card from hand
    #####:  863:			discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  863-block  0
call    0 never executed
        -:  864:
    #####:  865:			if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  866:			{
    #####:  867:				state->coins = state->coins + 2;
    $$$$$:  867-block  0
unconditional  0 never executed
        -:  868:			}
    #####:  869:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  869-block  0
branch  0 never executed
branch  1 never executed
        -:  870:			{
        -:  871:				//discard hand
    #####:  872:				while(numHandCards(state) > 0)
    $$$$$:  872-block  0
unconditional  0 never executed
    $$$$$:  872-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  873:				{
    #####:  874:					discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  874-block  0
call    0 never executed
unconditional  1 never executed
        -:  875:				}
        -:  876:
        -:  877:				//draw 4
    #####:  878:				for (i = 0; i < 4; i++)
    $$$$$:  878-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  878-block  1
branch  2 never executed
branch  3 never executed
        -:  879:				{
    #####:  880:					drawCard(currentPlayer, state);
    $$$$$:  880-block  0
call    0 never executed
        -:  881:				}
        -:  882:
        -:  883:				//other players discard hand and redraw if hand size > 4
    #####:  884:				for (i = 0; i < state->numPlayers; i++)
    $$$$$:  884-block  0
unconditional  0 never executed
    $$$$$:  884-block  1
unconditional  1 never executed
    $$$$$:  884-block  2
branch  2 never executed
branch  3 never executed
        -:  885:				{
    #####:  886:					if (i != currentPlayer)
    $$$$$:  886-block  0
branch  0 never executed
branch  1 never executed
        -:  887:					{
    #####:  888:						if ( state->handCount[i] > 4 )
    $$$$$:  888-block  0
branch  0 never executed
branch  1 never executed
        -:  889:						{
        -:  890:							//discard hand
    #####:  891:							while( state->handCount[i] > 0 )
    $$$$$:  891-block  0
unconditional  0 never executed
    $$$$$:  891-block  1
branch  1 never executed
branch  2 never executed
        -:  892:							{
    #####:  893:								discardCard(handPos, i, state, 0);
    $$$$$:  893-block  0
call    0 never executed
unconditional  1 never executed
        -:  894:							}
        -:  895:
        -:  896:							//draw 4
    #####:  897:							for (j = 0; j < 4; j++)
    $$$$$:  897-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  897-block  1
branch  2 never executed
branch  3 never executed
        -:  898:							{
    #####:  899:								drawCard(i, state);
    $$$$$:  899-block  0
call    0 never executed
        -:  900:							}
        -:  901:						}
        -:  902:					}
        -:  903:				}
        -:  904:
        -:  905:			}
    #####:  906:			return 0;
    $$$$$:  906-block  0
unconditional  0 never executed
        -:  907:
        -:  908:		case steward:
    #####:  909:			if (choice1 == 1)
    $$$$$:  909-block  0
branch  0 never executed
branch  1 never executed
        -:  910:			{
        -:  911:				//+2 cards
    #####:  912:				drawCard(currentPlayer, state);
    $$$$$:  912-block  0
call    0 never executed
    #####:  913:				drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -:  914:			}
    #####:  915:			else if (choice1 == 2)
    $$$$$:  915-block  0
branch  0 never executed
branch  1 never executed
        -:  916:			{
        -:  917:				//+2 coins
    #####:  918:				state->coins = state->coins + 2;
    $$$$$:  918-block  0
unconditional  0 never executed
        -:  919:			}
        -:  920:			else
        -:  921:			{
        -:  922:				//trash 2 cards in hand
    #####:  923:				discardCard(choice2, currentPlayer, state, 1);
    $$$$$:  923-block  0
call    0 never executed
    #####:  924:				discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -:  925:			}
        -:  926:
        -:  927:			//discard card from hand
    #####:  928:			discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  928-block  0
call    0 never executed
    #####:  929:			return 0;
unconditional  0 never executed
        -:  930:
        -:  931:		case tribute:
    #####:  932:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$:  932-block  0
branch  0 never executed
branch  1 never executed
    #####:  933:				if (state->deckCount[nextPlayer] > 0){
    $$$$$:  933-block  0
branch  0 never executed
branch  1 never executed
    #####:  934:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:					state->deckCount[nextPlayer]--;
    $$$$$:  935-block  0
unconditional  0 never executed
        -:  936:				}
    #####:  937:				else if (state->discardCount[nextPlayer] > 0){
    $$$$$:  937-block  0
branch  0 never executed
branch  1 never executed
    #####:  938:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  939:					state->discardCount[nextPlayer]--;
    $$$$$:  939-block  0
unconditional  0 never executed
        -:  940:				}
        -:  941:				else{
        -:  942:					//No Card to Reveal
        -:  943:					if (DEBUG){
        -:  944:						printf("No cards to reveal\n");
        -:  945:					}
        -:  946:				}
        -:  947:			}
        -:  948:			else{
    #####:  949:				if (state->deckCount[nextPlayer] == 0){
    $$$$$:  949-block  0
branch  0 never executed
branch  1 never executed
    #####:  950:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$:  950-block  0
unconditional  0 never executed
    $$$$$:  950-block  1
unconditional  1 never executed
    $$$$$:  950-block  2
branch  2 never executed
branch  3 never executed
    #####:  951:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  952:						state->deckCount[nextPlayer]++;
    #####:  953:						state->discard[nextPlayer][i] = -1;
    #####:  954:						state->discardCount[nextPlayer]--;
        -:  955:					}
        -:  956:
    #####:  957:					shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$:  957-block  0
call    0 never executed
unconditional  1 never executed
        -:  958:				}
    #####:  959:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  960:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  961:				state->deckCount[nextPlayer]--;
    #####:  962:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  963:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  964:				state->deckCount[nextPlayer]--;
    $$$$$:  964-block  0
unconditional  0 never executed
        -:  965:			}
        -:  966:
    #####:  967:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$:  967-block  0
branch  0 never executed
branch  1 never executed
    #####:  968:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  969:				state->playedCardCount++;
    #####:  970:				tributeRevealedCards[1] = -1;
    $$$$$:  970-block  0
unconditional  0 never executed
        -:  971:			}
        -:  972:
    #####:  973:			for (i = 0; i <= 2; i ++){
    $$$$$:  973-block  0
unconditional  0 never executed
    $$$$$:  973-block  1
unconditional  1 never executed
    $$$$$:  973-block  2
branch  2 never executed
branch  3 never executed
    #####:  974:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$:  974-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  974-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  974-block  2
branch  4 never executed
branch  5 never executed
    #####:  975:					state->coins += 2;
    $$$$$:  975-block  0
unconditional  0 never executed
        -:  976:				}
    #####:  977:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$:  977-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  977-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  977-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  977-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  977-block  4
branch  8 never executed
branch  9 never executed
    #####:  978:					drawCard(currentPlayer, state);
    $$$$$:  978-block  0
call    0 never executed
    #####:  979:					drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -:  980:				}
        -:  981:				else{//Action Card
    #####:  982:					state->numActions = state->numActions + 2;
    $$$$$:  982-block  0
unconditional  0 never executed
        -:  983:				}
        -:  984:			}
        -:  985:
    #####:  986:			return 0;
    $$$$$:  986-block  0
unconditional  0 never executed
        -:  987:
        -:  988:		case ambassador:
    #####:  989:			j = 0;		//used to check if player has enough cards to discard
        -:  990:
    #####:  991:			if (choice2 > 2 || choice2 < 0)
    $$$$$:  991-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  991-block  1
branch  2 never executed
branch  3 never executed
        -:  992:			{
    #####:  993:				return -1;				
    $$$$$:  993-block  0
unconditional  0 never executed
        -:  994:			}
        -:  995:
    #####:  996:			if (choice1 == handPos)
    $$$$$:  996-block  0
branch  0 never executed
branch  1 never executed
        -:  997:			{
    #####:  998:				return -1;
    $$$$$:  998-block  0
unconditional  0 never executed
        -:  999:			}
        -: 1000:
    #####: 1001:			for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1001-block  0
unconditional  0 never executed
    $$$$$: 1001-block  1
unconditional  1 never executed
    $$$$$: 1001-block  2
branch  2 never executed
branch  3 never executed
        -: 1002:			{
    #####: 1003:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1003-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1003-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1003-block  2
branch  4 never executed
branch  5 never executed
        -: 1004:				{
    #####: 1005:					j++;
    $$$$$: 1005-block  0
unconditional  0 never executed
        -: 1006:				}
        -: 1007:			}
    #####: 1008:			if (j < choice2)
    $$$$$: 1008-block  0
branch  0 never executed
branch  1 never executed
        -: 1009:			{
    #####: 1010:				return -1;				
    $$$$$: 1010-block  0
unconditional  0 never executed
        -: 1011:			}
        -: 1012:
        -: 1013:			if (DEBUG) 
        -: 1014:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1015:
        -: 1016:			//increase supply count for choosen card by amount being discarded
    #####: 1017:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1018:
        -: 1019:			//each other player gains a copy of revealed card
    #####: 1020:			for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1020-block  0
unconditional  0 never executed
    $$$$$: 1020-block  1
unconditional  1 never executed
    $$$$$: 1020-block  2
branch  2 never executed
branch  3 never executed
        -: 1021:			{
    #####: 1022:				if (i != currentPlayer)
    $$$$$: 1022-block  0
branch  0 never executed
branch  1 never executed
        -: 1023:				{
    #####: 1024:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1024-block  0
call    0 never executed
unconditional  1 never executed
        -: 1025:				}
        -: 1026:			}
        -: 1027:
        -: 1028:			//discard played card from hand
    #####: 1029:			discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1029-block  0
call    0 never executed
        -: 1030:
        -: 1031:			//trash copies of cards returned to supply
    #####: 1032:			for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1032-block  0
unconditional  1 never executed
    $$$$$: 1032-block  1
branch  2 never executed
branch  3 never executed
        -: 1033:			{
    #####: 1034:				for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1034-block  0
unconditional  0 never executed
    $$$$$: 1034-block  1
unconditional  1 never executed
    $$$$$: 1034-block  2
branch  2 never executed
branch  3 never executed
        -: 1035:				{
    #####: 1036:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1036-block  0
branch  0 never executed
branch  1 never executed
        -: 1037:					{
    #####: 1038:						discardCard(i, currentPlayer, state, 1);
    $$$$$: 1038-block  0
call    0 never executed
    #####: 1039:						break;
unconditional  0 never executed
        -: 1040:					}
        -: 1041:				}
        -: 1042:			}			
        -: 1043:
    #####: 1044:			return 0;
    $$$$$: 1044-block  0
unconditional  0 never executed
        -: 1045:
        -: 1046:		case cutpurse:
    #####: 1047:			updateCoins(currentPlayer, state, 2);
    $$$$$: 1047-block  0
call    0 never executed
        -: 1048:
    #####: 1049:			for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1049-block  0
unconditional  1 never executed
    $$$$$: 1049-block  1
branch  2 never executed
branch  3 never executed
        -: 1050:			{
    #####: 1051:				if (i != currentPlayer)
    $$$$$: 1051-block  0
branch  0 never executed
branch  1 never executed
        -: 1052:				{
    #####: 1053:					for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1053-block  0
unconditional  0 never executed
    $$$$$: 1053-block  1
unconditional  1 never executed
    $$$$$: 1053-block  2
branch  2 never executed
branch  3 never executed
        -: 1054:					{
    #####: 1055:						if (state->hand[i][j] == copper)
    $$$$$: 1055-block  0
branch  0 never executed
branch  1 never executed
        -: 1056:						{
    #####: 1057:							discardCard(j, i, state, 0);
    $$$$$: 1057-block  0
call    0 never executed
    #####: 1058:							break;
unconditional  0 never executed
        -: 1059:						}
    #####: 1060:						if (j == state->handCount[i])
    $$$$$: 1060-block  0
branch  0 never executed
branch  1 never executed
        -: 1061:						{
    #####: 1062:							for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1062-block  0
unconditional  0 never executed
    $$$$$: 1062-block  1
unconditional  1 never executed
    $$$$$: 1062-block  2
branch  2 never executed
branch  3 never executed
        -: 1063:							{
        -: 1064:								if (DEBUG)
        -: 1065:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1066:							}	
    #####: 1067:							break;
    $$$$$: 1067-block  0
unconditional  0 never executed
        -: 1068:						}		
        -: 1069:					}
        -: 1070:				}
        -: 1071:			}				
        -: 1072:
        -: 1073:			//discard played card from hand
    #####: 1074:			discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1074-block  0
call    0 never executed
        -: 1075:
    #####: 1076:			return 0;
unconditional  0 never executed
        -: 1077:
        -: 1078:		case embargo: 
        -: 1079:			//+2 Coins
    #####: 1080:			state->coins = state->coins + 2;
        -: 1081:
        -: 1082:			//see if selected pile is in play
    #####: 1083:			if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1083-block  0
branch  0 never executed
branch  1 never executed
        -: 1084:			{
    #####: 1085:				return -1;
    $$$$$: 1085-block  0
unconditional  0 never executed
        -: 1086:			}
        -: 1087:
        -: 1088:			//add embargo token to selected supply pile
    #####: 1089:			state->embargoTokens[choice1]++;
        -: 1090:
        -: 1091:			//trash card
    #####: 1092:			discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1092-block  0
call    0 never executed
    #####: 1093:			return 0;
unconditional  0 never executed
        -: 1094:
        -: 1095:		case outpost:
        -: 1096:			//set outpost flag
    #####: 1097:			state->outpostPlayed++;
        -: 1098:
        -: 1099:			//discard card
    #####: 1100:			discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1100-block  0
call    0 never executed
    #####: 1101:			return 0;
unconditional  0 never executed
        -: 1102:
        -: 1103:		case salvager:
        -: 1104:			//+1 buy
    #####: 1105:			state->numBuys++;
        -: 1106:
    #####: 1107:			if (choice1)
    $$$$$: 1107-block  0
branch  0 never executed
branch  1 never executed
        -: 1108:			{
        -: 1109:				//gain coins equal to trashed card
    #####: 1110:				state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1110-block  0
call    0 never executed
call    1 never executed
        -: 1111:				//trash card
    #####: 1112:				discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1113:			}
        -: 1114:
        -: 1115:			//discard card
    #####: 1116:			discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1116-block  0
call    0 never executed
    #####: 1117:			return 0;
unconditional  0 never executed
        -: 1118:
        -: 1119:		case sea_hag:
    #####: 1120:			for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1120-block  0
unconditional  0 never executed
    $$$$$: 1120-block  1
unconditional  1 never executed
    $$$$$: 1120-block  2
branch  2 never executed
branch  3 never executed
    #####: 1121:				if (i != currentPlayer){
    $$$$$: 1121-block  0
branch  0 never executed
branch  1 never executed
    #####: 1122:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1123:					state->discardCount[i]++;
    #####: 1124:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1124-block  0
unconditional  0 never executed
        -: 1125:				}
        -: 1126:			}
    #####: 1127:			return 0;
    $$$$$: 1127-block  0
unconditional  0 never executed
        -: 1128:
        -: 1129:		case treasure_map:
        -: 1130:			//search hand for another treasure_map
    #####: 1131:			index = -1;
    #####: 1132:			for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1132-block  0
unconditional  0 never executed
    $$$$$: 1132-block  1
unconditional  1 never executed
    $$$$$: 1132-block  2
branch  2 never executed
branch  3 never executed
        -: 1133:			{
    #####: 1134:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1134-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1134-block  1
branch  2 never executed
branch  3 never executed
        -: 1135:				{
    #####: 1136:					index = i;
    #####: 1137:					break;
    $$$$$: 1137-block  0
unconditional  0 never executed
        -: 1138:				}
        -: 1139:			}
        -: 1140:
    #####: 1141:			if (index > -1)
    $$$$$: 1141-block  0
branch  0 never executed
branch  1 never executed
        -: 1142:			{
        -: 1143:				//trash both treasure cards
    #####: 1144:				discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1144-block  0
call    0 never executed
    #####: 1145:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1146:
        -: 1147:				//gain 4 Gold cards
    #####: 1148:				for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1148-block  0
branch  2 never executed
branch  3 never executed
        -: 1149:				{
    #####: 1150:					gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1150-block  0
call    0 never executed
        -: 1151:				}
        -: 1152:
        -: 1153:				//return success
    #####: 1154:				return 1;
    $$$$$: 1154-block  0
unconditional  0 never executed
        -: 1155:			}
        -: 1156:
        -: 1157:			//no second treasure_map found in hand
    #####: 1158:			return -1;
    $$$$$: 1158-block  0
unconditional  0 never executed
        -: 1159:	} //find this
        -: 1160:
       50: 1161:	return -1;
    $$$$$: 1161-block  0
unconditional  0 never executed
       50: 1161-block  1
unconditional  1 taken 50
        -: 1162:}
        -: 1163:
function cardEffect_CouncilRoom called 0 returned 0% blocks executed 0%
    #####: 1164:int cardEffect_CouncilRoom(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
    $$$$$: 1164-block  0
        -: 1165:	int i;
    #####: 1166:	int currentPlayer = whoseTurn(state);
    $$$$$: 1166-block  0
call    0 never executed
        -: 1167:
        -: 1168:	//+4 Cards
    #####: 1169:	for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1169-block  0
branch  2 never executed
branch  3 never executed
        -: 1170:	{
    #####: 1171:		drawCard(currentPlayer, state);
    $$$$$: 1171-block  0
call    0 never executed
        -: 1172:	}
        -: 1173:
        -: 1174:	//+1 Buy
    #####: 1175:	state->numBuys++;
        -: 1176:
        -: 1177:	//Each other player draws a card
    #####: 1178:	for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1178-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1178-block  1
branch  2 never executed
branch  3 never executed
        -: 1179:	{
        -: 1180:		//if ( i != currentPlayer )
        -: 1181:		{
    #####: 1182:			drawCard(i, state);
    $$$$$: 1182-block  0
call    0 never executed
        -: 1183:		}
        -: 1184:	}
        -: 1185:
        -: 1186:	//put played card in played card pile
    #####: 1187:	discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1187-block  0
call    0 never executed
        -: 1188:
    #####: 1189:	return 0;
unconditional  0 never executed
        -: 1190:}
        -: 1191:
function cardEffect_Smithy called 6 returned 100% blocks executed 100%
        6: 1192:int cardEffect_Smithy(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        6: 1192-block  0
        -: 1193:	int i;
        6: 1194:	int currentPlayer = whoseTurn(state);
        6: 1194-block  0
call    0 returned 6
        -: 1195:
        -: 1196:	//+3 Cards
       18: 1197:	for (i = 1; i < 3; i++) {
unconditional  0 taken 6
unconditional  1 taken 12
       18: 1197-block  0
branch  2 taken 12
branch  3 taken 6 (fallthrough)
       12: 1198:		drawCard(currentPlayer, state);
       12: 1198-block  0
call    0 returned 12
        -: 1199:	}
        -: 1200:
        -: 1201:	//discard card from hand
        6: 1202:	discardCard(handPos, currentPlayer, state, 0);
        6: 1202-block  0
call    0 returned 6
        -: 1203:
        6: 1204:	return 0;
unconditional  0 taken 6
        -: 1205:}
        -: 1206:
function cardEffect_Adventurer called 36 returned 100% blocks executed 100%
       36: 1207:int cardEffect_Adventurer(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
       36: 1207-block  0
       36: 1208:	int z = 0;
       36: 1209:	int currentPlayer = whoseTurn(state);
       36: 1209-block  0
call    0 returned 36
        -: 1210:	int temphand[MAX_HAND];
        -: 1211:	int cardDrawn;
       36: 1212:	int drawntreasure=0;
        -: 1213:
      801: 1214:	while(drawntreasure<2){
unconditional  0 taken 36
      801: 1214-block  0
branch  1 taken 765
branch  2 taken 36 (fallthrough)
      765: 1215:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
      765: 1215-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 753
       12: 1216:			shuffle(currentPlayer, state);
       12: 1216-block  0
call    0 returned 12
unconditional  1 taken 12
        -: 1217:		}
        -: 1218:
      765: 1219:		drawCard(currentPlayer, state);
      765: 1219-block  0
call    0 returned 765
      765: 1220:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1221:
      765: 1222:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 741 (fallthrough)
branch  1 taken 24
      741: 1222-block  0
branch  2 taken 717 (fallthrough)
branch  3 taken 24
      717: 1222-block  1
branch  4 taken 24 (fallthrough)
branch  5 taken 693
       72: 1223:			drawntreasure++;
       72: 1223-block  0
unconditional  0 taken 72
        -: 1224:		else {
      693: 1225:			temphand[z]=cardDrawn;
      693: 1226:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      693: 1227:			z++;
      693: 1227-block  0
unconditional  0 taken 693
        -: 1228:		}
        -: 1229:	}
      765: 1230:	while(z>=0){
       36: 1230-block  0
unconditional  0 taken 36
      765: 1230-block  1
branch  1 taken 729
branch  2 taken 36 (fallthrough)
      729: 1231:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      729: 1232:		z=z-1;
      729: 1232-block  0
unconditional  0 taken 729
        -: 1233:	}
        -: 1234:
       36: 1235:	return 0;
       36: 1235-block  0
unconditional  0 taken 36
        -: 1236:}
        -: 1237:
function cardEffect_Village called 4 returned 100% blocks executed 100%
        4: 1238:int cardEffect_Village(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        4: 1238-block  0
        4: 1239:	int currentPlayer = whoseTurn(state);
        4: 1239-block  0
call    0 returned 4
        -: 1240:
        -: 1241:	//+1 Card
        4: 1242:	drawCard(currentPlayer, state);
call    0 returned 4
        -: 1243:
        -: 1244:	//+2 Actions
        4: 1245:	state->numActions = 2;
        -: 1246:
        -: 1247:	//discard played card from hand
        4: 1248:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        -: 1249:
        4: 1250:	return 0;
unconditional  0 taken 4
        -: 1251:}
        -: 1252:
function cardEffect_GreatHall called 4 returned 100% blocks executed 100%
        4: 1253:int cardEffect_GreatHall(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        4: 1253-block  0
        4: 1254:	int currentPlayer = whoseTurn(state);
        4: 1254-block  0
call    0 returned 4
        -: 1255:
        -: 1256:	//+1 Card
        4: 1257:	drawCard(currentPlayer, state);
call    0 returned 4
        -: 1258:
        -: 1259:	//+1 Actions
        4: 1260:	state->numActions++;
        -: 1261:
        -: 1262:	//discard card from hand
        4: 1263:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        -: 1264:
        4: 1265:	return 0;
unconditional  0 taken 4
        -: 1266:}
        -: 1267:
function discardCard called 14 returned 100% blocks executed 78%
       14: 1268:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
       14: 1268-block  0
        -: 1269:{
        -: 1270:
        -: 1271:	//if card is not trashed, added to Played pile 
       14: 1272:	if (trashFlag < 1)
       14: 1272-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 0
        -: 1273:	{
        -: 1274:		//add card to played pile
       14: 1275:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       14: 1276:		state->playedCardCount++;
       14: 1276-block  0
unconditional  0 taken 14
        -: 1277:	}
        -: 1278:
        -: 1279:	//set played card to -1
       14: 1280:	state->hand[currentPlayer][handPos] = -1;
        -: 1281:
        -: 1282:	//remove card from player's hand
       14: 1283:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
       14: 1283-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 14
        -: 1284:	{
        -: 1285:		//reduce number of cards in hand
    #####: 1286:		state->handCount[currentPlayer]--;
    $$$$$: 1286-block  0
unconditional  0 never executed
        -: 1287:	}
       14: 1288:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
       14: 1288-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 14
        -: 1289:	{
        -: 1290:		//reduce number of cards in hand
    #####: 1291:		state->handCount[currentPlayer]--;
    $$$$$: 1291-block  0
unconditional  0 never executed
        -: 1292:	}
        -: 1293:	else 	
        -: 1294:	{
        -: 1295:		//replace discarded card with last card in hand
       14: 1296:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1297:		//set last card to -1
       14: 1298:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1299:		//reduce number of cards in hand
       14: 1300:		state->handCount[currentPlayer]--;
       14: 1300-block  0
unconditional  0 taken 14
        -: 1301:	}
        -: 1302:
       14: 1303:	return 0;
       14: 1303-block  0
unconditional  0 taken 14
        -: 1304:}
        -: 1305:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1306:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1306-block  0
        -: 1307:{
        -: 1308:	//Note: supplyPos is enum of choosen card
        -: 1309:
        -: 1310:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1311:	if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1311-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1312:	{
    #####: 1313:		return -1;
    $$$$$: 1313-block  0
unconditional  0 never executed
        -: 1314:	}
        -: 1315:
        -: 1316:	//added card for [whoseTurn] current player:
        -: 1317:	// toFlag = 0 : add to discard
        -: 1318:	// toFlag = 1 : add to deck
        -: 1319:	// toFlag = 2 : add to hand
        -: 1320:
    #####: 1321:	if (toFlag == 1)
    $$$$$: 1321-block  0
branch  0 never executed
branch  1 never executed
        -: 1322:	{
    #####: 1323:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1324:		state->deckCount[player]++;
    $$$$$: 1324-block  0
unconditional  0 never executed
        -: 1325:	}
    #####: 1326:	else if (toFlag == 2)
    $$$$$: 1326-block  0
branch  0 never executed
branch  1 never executed
        -: 1327:	{
    #####: 1328:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1329:		state->handCount[player]++;
    $$$$$: 1329-block  0
unconditional  0 never executed
        -: 1330:	}
        -: 1331:	else
        -: 1332:	{
    #####: 1333:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1334:		state->discardCount[player]++;
    $$$$$: 1334-block  0
unconditional  0 never executed
        -: 1335:	}
        -: 1336:
        -: 1337:	//decrease number in supply pile
    #####: 1338:	state->supplyCount[supplyPos]--;
        -: 1339:
    #####: 1340:	return 0;
    $$$$$: 1340-block  0
unconditional  0 never executed
        -: 1341:}
        -: 1342:
function updateCoins called 5213 returned 100% blocks executed 100%
     5213: 1343:int updateCoins(int player, struct gameState *state, int bonus)
     5213: 1343-block  0
        -: 1344:{
        -: 1345:	int i;
        -: 1346:
        -: 1347:	//reset coin count
     5213: 1348:	state->coins = 0;
        -: 1349:
        -: 1350:	//add coins for each Treasure card in player's hand
   203778: 1351:	for (i = 0; i < state->handCount[player]; i++)
     5213: 1351-block  0
unconditional  0 taken 5213
   198565: 1351-block  1
unconditional  1 taken 198565
   203778: 1351-block  2
branch  2 taken 198565
branch  3 taken 5213 (fallthrough)
        -: 1352:	{
   198565: 1353:		if (state->hand[player][i] == copper)
   198565: 1353-block  0
branch  0 taken 56854 (fallthrough)
branch  1 taken 141711
        -: 1354:		{
    56854: 1355:			state->coins += 1;
    56854: 1355-block  0
unconditional  0 taken 56854
        -: 1356:		}
   141711: 1357:		else if (state->hand[player][i] == silver)
   141711: 1357-block  0
branch  0 taken 46370 (fallthrough)
branch  1 taken 95341
        -: 1358:		{
    46370: 1359:			state->coins += 2;
    46370: 1359-block  0
unconditional  0 taken 46370
        -: 1360:		}
    95341: 1361:		else if (state->hand[player][i] == gold)
    95341: 1361-block  0
branch  0 taken 46370 (fallthrough)
branch  1 taken 48971
        -: 1362:		{
    46370: 1363:			state->coins += 3;
    46370: 1363-block  0
unconditional  0 taken 46370
        -: 1364:		}	
        -: 1365:	}	
        -: 1366:
        -: 1367:	//add bonus
     5213: 1368:	state->coins += bonus;
        -: 1369:
     5213: 1370:	return 0;
     5213: 1370-block  0
unconditional  0 taken 5213
        -: 1371:}
        -: 1372:
        -: 1373:
        -: 1374://end of dominion.c
        -: 1375:
        -: 1376:
