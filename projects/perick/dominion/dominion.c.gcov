        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 122940 returned 100% blocks executed 83%
   122940:    8:int compare(const void* a, const void* b) {
   122940:    8-block  0
   122940:    9:	if (*(int*)a > *(int*)b)
   122940:    9-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 122940
    #####:   10:		return 1;
    $$$$$:   10-block  0
unconditional  0 never executed
   122940:   11:	if (*(int*)a < *(int*)b)
   122940:   11-block  0
branch  0 taken 32772 (fallthrough)
branch  1 taken 90168
    32772:   12:		return -1;
    32772:   12-block  0
unconditional  0 taken 32772
    90168:   13:	return 0;
    90168:   13-block  0
unconditional  0 taken 90168
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 2549 returned 100% blocks executed 95%
     2549:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
     2549:   37-block  0
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
     2549:   44:	SelectStream(1);
     2549:   44-block  0
call    0 returned 2549
     2549:   45:	PutSeed((long)randomSeed);
call    0 returned 2549
        -:   46:
        -:   47:	//check number of players
     2549:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 2549 (fallthrough)
branch  1 taken 0
     2549:   48-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 2549
        -:   49:	{
    #####:   50:		return -1;
    $$$$$:   50-block  0
unconditional  0 never executed
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
     2549:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
    28039:   57:	for (i = 0; i < 10; i++)
     2549:   57-block  0
unconditional  0 taken 2549
    25490:   57-block  1
unconditional  1 taken 25490
    28039:   57-block  2
branch  2 taken 25490
branch  3 taken 2549 (fallthrough)
        -:   58:	{
   280390:   59:		for (j = 0; j < 10; j++)
    25490:   59-block  0
unconditional  0 taken 25490
   254900:   59-block  1
unconditional  1 taken 254900
   280390:   59-block  2
branch  2 taken 254900
branch  3 taken 25490 (fallthrough)
        -:   60:		{
   254900:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
   254900:   61-block  0
branch  0 taken 229410 (fallthrough)
branch  1 taken 25490
   229410:   61-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 229410
        -:   62:			{
    #####:   63:				return -1;
    $$$$$:   63-block  0
unconditional  0 never executed
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
     2549:   73:	if (numPlayers == 2)
     2549:   73-block  0
branch  0 taken 579 (fallthrough)
branch  1 taken 1970
        -:   74:	{
      579:   75:		state->supplyCount[curse] = 10;
      579:   75-block  0
unconditional  0 taken 579
        -:   76:	}
     1970:   77:	else if (numPlayers == 3)
     1970:   77-block  0
branch  0 taken 845 (fallthrough)
branch  1 taken 1125
        -:   78:	{
      845:   79:		state->supplyCount[curse] = 20;
      845:   79-block  0
unconditional  0 taken 845
        -:   80:	}
        -:   81:	else
        -:   82:	{
     1125:   83:		state->supplyCount[curse] = 30;
     1125:   83-block  0
unconditional  0 taken 1125
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
     2549:   87:	if (numPlayers == 2)
     2549:   87-block  0
branch  0 taken 579 (fallthrough)
branch  1 taken 1970
        -:   88:	{
      579:   89:		state->supplyCount[estate] = 8;
      579:   90:		state->supplyCount[duchy] = 8;
      579:   91:		state->supplyCount[province] = 8;
      579:   91-block  0
unconditional  0 taken 579
        -:   92:	}
        -:   93:	else
        -:   94:	{
     1970:   95:		state->supplyCount[estate] = 12;
     1970:   96:		state->supplyCount[duchy] = 12;
     1970:   97:		state->supplyCount[province] = 12;
     1970:   97-block  0
unconditional  0 taken 1970
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
     2549:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
     2549:  102:	state->supplyCount[silver] = 40;
     2549:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
    53529:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
     2549:  106-block  0
unconditional  0 taken 2549
    50980:  106-block  1
unconditional  1 taken 50980
    53529:  106-block  2
branch  2 taken 50980
branch  3 taken 2549 (fallthrough)
        -:  107:	{
   420585:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
    50980:  108-block  0
unconditional  0 taken 50980
   369605:  108-block  1
unconditional  1 taken 369605
   420585:  108-block  2
branch  2 taken 395095
branch  3 taken 25490 (fallthrough)
        -:  109:		{
   395095:  110:			if (kingdomCards[j] == i)
   395095:  110-block  0
branch  0 taken 25490 (fallthrough)
branch  1 taken 369605
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
    25490:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    25490:  113-block  0
branch  0 taken 22941 (fallthrough)
branch  1 taken 2549
    22941:  113-block  1
branch  2 taken 2549 (fallthrough)
branch  3 taken 20392
        -:  114:				{
    10196:  115:					if (numPlayers == 2){ 
     5098:  115-block  0
branch  0 taken 1158 (fallthrough)
branch  1 taken 3940
     5098:  115-block  1
unconditional  2 taken 5098
     1158:  116:						state->supplyCount[i] = 8; 
     1158:  116-block  0
unconditional  0 taken 1158
        -:  117:					}
     3940:  118:					else{ state->supplyCount[i] = 12; }
     3940:  118-block  0
unconditional  0 taken 3940
        -:  119:				}
        -:  120:				else
        -:  121:				{
    20392:  122:					state->supplyCount[i] = 10;
    20392:  122-block  0
unconditional  0 taken 20392
        -:  123:				}
    25490:  124:				break;
    25490:  124-block  0
unconditional  0 taken 25490
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
   369605:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
    10742:  138:	for (i = 0; i < numPlayers; i++)
     2549:  138-block  0
unconditional  0 taken 2549
     8193:  138-block  1
unconditional  1 taken 8193
    10742:  138-block  2
branch  2 taken 8193
branch  3 taken 2549 (fallthrough)
        -:  139:	{
     8193:  140:		state->deckCount[i] = 0;
    32772:  141:		for (j = 0; j < 3; j++)
     8193:  141-block  0
unconditional  0 taken 8193
    24579:  141-block  1
unconditional  1 taken 24579
    32772:  141-block  2
branch  2 taken 24579
branch  3 taken 8193 (fallthrough)
        -:  142:		{
    24579:  143:			state->deck[i][j] = estate;
    24579:  144:			state->deckCount[i]++;
        -:  145:		}
    65544:  146:		for (j = 3; j < 10; j++)
     8193:  146-block  0
unconditional  0 taken 8193
    57351:  146-block  1
unconditional  1 taken 57351
    65544:  146-block  2
branch  2 taken 57351
branch  3 taken 8193 (fallthrough)
        -:  147:		{
    57351:  148:			state->deck[i][j] = copper;
    57351:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
    10742:  154:	for (i = 0; i < numPlayers; i++)
     2549:  154-block  0
unconditional  0 taken 2549
     8193:  154-block  1
unconditional  1 taken 8193
    10742:  154-block  2
branch  2 taken 8193
branch  3 taken 2549 (fallthrough)
        -:  155:	{
     8193:  156:		if ( shuffle(i, state) < 0 )
     8193:  156-block  0
call    0 returned 8193
branch  1 taken 0 (fallthrough)
branch  2 taken 8193
        -:  157:		{
    #####:  158:			return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
    10742:  163:	for (i = 0; i < numPlayers; i++)
     2549:  163-block  0
unconditional  0 taken 2549
     8193:  163-block  1
unconditional  1 taken 8193
    10742:  163-block  2
branch  2 taken 8193
branch  3 taken 2549 (fallthrough)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
     8193:  166:		state->handCount[i] = 0;
     8193:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
    71372:  176:	for (i = 0; i <= treasure_map; i++)
     2549:  176-block  0
unconditional  0 taken 2549
    68823:  176-block  1
unconditional  1 taken 68823
    71372:  176-block  2
branch  2 taken 68823
branch  3 taken 2549 (fallthrough)
        -:  177:	{
    68823:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
     2549:  182:	state->outpostPlayed = 0;
     2549:  183:	state->phase = 0;
     2549:  184:	state->numActions = 1;
     2549:  185:	state->numBuys = 1;
     2549:  186:	state->playedCardCount = 0;
     2549:  187:	state->whoseTurn = 0;
     2549:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
    15294:  192:	for (it = 0; it < 5; it++){
     2549:  192-block  0
unconditional  0 taken 2549
unconditional  1 taken 12745
    15294:  192-block  1
branch  2 taken 12745
branch  3 taken 2549 (fallthrough)
    12745:  193:		drawCard(state->whoseTurn, state);
    12745:  193-block  0
call    0 returned 12745
        -:  194:	}
        -:  195:
     2549:  196:	updateCoins(state->whoseTurn, state, 0);
     2549:  196-block  0
call    0 returned 2549
        -:  197:
     2549:  198:	return 0;
unconditional  0 taken 2549
        -:  199:}
        -:  200:
function shuffle called 8260 returned 100% blocks executed 100%
     8260:  201:int shuffle(int player, struct gameState *state) {
     8260:  201-block  0
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
     8260:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
     8260:  209:	if (state->deckCount[player] < 1)
     8260:  209-block  0
branch  0 taken 64 (fallthrough)
branch  1 taken 8196
       64:  210:		return -1;
       64:  210-block  0
unconditional  0 taken 64
        -:  211:
     8196:  212:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
     8196:  212-block  0
call    0 returned 8196
        -:  213:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    90156:  215:	while (state->deckCount[player] > 0) {
unconditional  0 taken 8196
    90156:  215-block  0
branch  1 taken 81960
branch  2 taken 8196 (fallthrough)
    81960:  216:		card = floor(Random() * state->deckCount[player]);
    81960:  216-block  0
call    0 returned 81960
    81960:  217:		newDeck[newDeckPos] = state->deck[player][card];
    81960:  218:		newDeckPos++;
   285735:  219:		for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 81960
   203775:  219-block  0
unconditional  1 taken 203775
   285735:  219-block  1
branch  2 taken 203775
branch  3 taken 81960 (fallthrough)
   203775:  220:			state->deck[player][i] = state->deck[player][i+1];
        -:  221:		}
    81960:  222:		state->deckCount[player]--;
    81960:  222-block  0
unconditional  0 taken 81960
        -:  223:	}
    90156:  224:	for (i = 0; i < newDeckPos; i++) {
     8196:  224-block  0
unconditional  0 taken 8196
    81960:  224-block  1
unconditional  1 taken 81960
    90156:  224-block  2
branch  2 taken 81960
branch  3 taken 8196 (fallthrough)
    81960:  225:		state->deck[player][i] = newDeck[i];
    81960:  226:		state->deckCount[player]++;
        -:  227:	}
        -:  228:
     8260:  229:	return 0;
     8196:  229-block  0
unconditional  0 taken 8196
     8260:  229-block  1
unconditional  1 taken 8260
        -:  230:}
        -:  231:
function playCard called 0 returned 0% blocks executed 0%
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  232-block  0
        -:  233:{	
        -:  234:	int card;
    #####:  235:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:	//check if it is the right phase
    #####:  238:	if (state->phase != 0)
    $$$$$:  238-block  0
branch  0 never executed
branch  1 never executed
        -:  239:	{
    #####:  240:		return -1;
    $$$$$:  240-block  0
unconditional  0 never executed
        -:  241:	}
        -:  242:
        -:  243:	//check if player has enough actions
    #####:  244:	if ( state->numActions < 1 )
    $$$$$:  244-block  0
branch  0 never executed
branch  1 never executed
        -:  245:	{
    #####:  246:		return -1;
    $$$$$:  246-block  0
unconditional  0 never executed
        -:  247:	}
        -:  248:
        -:  249:	//get card played
    #####:  250:	card = handCard(handPos, state);
    $$$$$:  250-block  0
call    0 never executed
        -:  251:
        -:  252:	//check if selected card is an action
    #####:  253:	if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  253-block  0
branch  2 never executed
branch  3 never executed
        -:  254:	{
    #####:  255:		return -1;
    $$$$$:  255-block  0
unconditional  0 never executed
        -:  256:	}
        -:  257:
        -:  258:	//play card
    #####:  259:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  260:	{
    #####:  261:		return -1;
    $$$$$:  261-block  0
unconditional  0 never executed
        -:  262:	}
        -:  263:
        -:  264:	//reduce number of actions
    #####:  265:	state->numActions--;
        -:  266:
        -:  267:	//update coins (Treasure cards may be added with card draws)
    #####:  268:	updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  268-block  0
call    0 never executed
        -:  269:
    #####:  270:	return 0;
unconditional  0 never executed
    $$$$$:  270-block  0
unconditional  1 never executed
        -:  271:}
        -:  272:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  273-block  0
    $$$$$:  273-block  1
unconditional  0 never executed
        -:  274:	int who;
        -:  275:	if (DEBUG){
        -:  276:		printf("Entering buyCard...\n");
        -:  277:	}
        -:  278:
        -:  279:	// I don't know what to do about the phase thing.
        -:  280:
    #####:  281:	who = state->whoseTurn;
        -:  282:
    #####:  283:	if (state->numBuys < 1){
    $$$$$:  283-block  0
branch  0 never executed
branch  1 never executed
        -:  284:		if (DEBUG)
        -:  285:			printf("You do not have any buys left\n");
    #####:  286:		return -1;
    $$$$$:  286-block  0
unconditional  0 never executed
    #####:  287:	} else if (supplyCount(supplyPos, state) <1){
    $$$$$:  287-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  288:		if (DEBUG)
        -:  289:			printf("There are not any of that type of card left\n");
    #####:  290:		return -1;
    $$$$$:  290-block  0
unconditional  0 never executed
    #####:  291:	} else if (state->coins < getCost(supplyPos)){
    $$$$$:  291-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  292:		if (DEBUG) 
        -:  293:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:		return -1;
    $$$$$:  294-block  0
unconditional  0 never executed
        -:  295:	} else {
    #####:  296:		state->phase=1;
        -:  297:		//state->supplyCount[supplyPos]--;
    #####:  298:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  298-block  0
call    0 never executed
        -:  299:
    #####:  300:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  301:		state->numBuys--;
unconditional  0 never executed
        -:  302:		if (DEBUG)
        -:  303:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:	}
        -:  305:
        -:  306:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:	//state->discardCount[who]++;
        -:  308:
    #####:  309:	return 0;
    $$$$$:  309-block  0
unconditional  0 never executed
        -:  310:}
        -:  311:
function numHandCards called 42 returned 100% blocks executed 100%
       42:  312:int numHandCards(struct gameState *state) {
       42:  312-block  0
       42:  313:	return state->handCount[ whoseTurn(state) ];
       42:  313-block  0
call    0 returned 42
unconditional  1 taken 42
        -:  314:}
        -:  315:
function handCard called 0 returned 0% blocks executed 0%
    #####:  316:int handCard(int handPos, struct gameState *state) {
    $$$$$:  316-block  0
    #####:  317:	int currentPlayer = whoseTurn(state);
    $$$$$:  317-block  0
call    0 never executed
    #####:  318:	return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  319:}
        -:  320:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  321:int supplyCount(int card, struct gameState *state) {
    $$$$$:  321-block  0
    #####:  322:	return state->supplyCount[card];
    $$$$$:  322-block  0
unconditional  0 never executed
        -:  323:}
        -:  324:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  325-block  0
        -:  326:	int i;
    #####:  327:	int count = 0;
        -:  328:
    #####:  329:	for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  329-block  0
unconditional  0 never executed
    $$$$$:  329-block  1
unconditional  1 never executed
    $$$$$:  329-block  2
branch  2 never executed
branch  3 never executed
        -:  330:	{
    #####:  331:		if (state->deck[player][i] == card) count++;
    $$$$$:  331-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  331-block  1
unconditional  2 never executed
        -:  332:	}
        -:  333:
    #####:  334:	for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  334-block  0
unconditional  0 never executed
    $$$$$:  334-block  1
unconditional  1 never executed
    $$$$$:  334-block  2
branch  2 never executed
branch  3 never executed
        -:  335:	{
    #####:  336:		if (state->hand[player][i] == card) count++;
    $$$$$:  336-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  336-block  1
unconditional  2 never executed
        -:  337:	}
        -:  338:
    #####:  339:	for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  339-block  0
unconditional  0 never executed
    $$$$$:  339-block  1
unconditional  1 never executed
    $$$$$:  339-block  2
branch  2 never executed
branch  3 never executed
        -:  340:	{
    #####:  341:		if (state->discard[player][i] == card) count++;
    $$$$$:  341-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  341-block  1
unconditional  2 never executed
        -:  342:	}
        -:  343:
    #####:  344:	return count;
    $$$$$:  344-block  0
unconditional  0 never executed
        -:  345:}
        -:  346:
function whoseTurn called 98 returned 100% blocks executed 100%
       98:  347:int whoseTurn(struct gameState *state) {
       98:  347-block  0
       98:  348:	return state->whoseTurn;
       98:  348-block  0
unconditional  0 taken 98
        -:  349:}
        -:  350:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  351:int endTurn(struct gameState *state) {
    $$$$$:  351-block  0
        -:  352:	int k;
        -:  353:	int i;
    #####:  354:	int currentPlayer = whoseTurn(state);
    $$$$$:  354-block  0
call    0 never executed
        -:  355:
        -:  356:	//Discard hand
    #####:  357:	for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  357-block  0
unconditional  1 never executed
    $$$$$:  357-block  1
branch  2 never executed
branch  3 never executed
    #####:  358:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:	}
    #####:  361:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:
        -:  363:	//Code for determining the player
    #####:  364:	if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  364-block  0
branch  0 never executed
branch  1 never executed
    #####:  365:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  365-block  0
unconditional  0 never executed
        -:  366:	}
        -:  367:	else{
    #####:  368:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  368-block  0
unconditional  0 never executed
        -:  369:	}
        -:  370:
    #####:  371:	state->outpostPlayed = 0;
    #####:  372:	state->phase = 0;
    #####:  373:	state->numActions = 1;
    #####:  374:	state->coins = 0;
    #####:  375:	state->numBuys = 1;
    #####:  376:	state->playedCardCount = 0;
    #####:  377:	state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:	//int k; move to top
        -:  380:	//Next player draws hand
    #####:  381:	for (k = 0; k < 5; k++){
    $$$$$:  381-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  381-block  1
branch  2 never executed
branch  3 never executed
    #####:  382:		drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  382-block  0
call    0 never executed
        -:  383:	}
        -:  384:
        -:  385:	//Update money
    #####:  386:	updateCoins(state->whoseTurn, state , 0);
    $$$$$:  386-block  0
call    0 never executed
        -:  387:
    #####:  388:	return 0;
unconditional  0 never executed
        -:  389:}
        -:  390:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  391:int isGameOver(struct gameState *state) {
    $$$$$:  391-block  0
        -:  392:	int i;
        -:  393:	int j;
        -:  394:
        -:  395:	//if stack of Province cards is empty, the game ends
    #####:  396:	if (state->supplyCount[province] == 0)
    $$$$$:  396-block  0
branch  0 never executed
branch  1 never executed
        -:  397:	{
    #####:  398:		return 1;
    $$$$$:  398-block  0
unconditional  0 never executed
        -:  399:	}
        -:  400:
        -:  401:	//if three supply pile are at 0, the game ends
    #####:  402:	j = 0;
    #####:  403:	for (i = 0; i < 25; i++)
    $$$$$:  403-block  0
unconditional  0 never executed
    $$$$$:  403-block  1
unconditional  1 never executed
    $$$$$:  403-block  2
branch  2 never executed
branch  3 never executed
        -:  404:	{
    #####:  405:		if (state->supplyCount[i] == 0)
    $$$$$:  405-block  0
branch  0 never executed
branch  1 never executed
        -:  406:		{
    #####:  407:			j++;
    $$$$$:  407-block  0
unconditional  0 never executed
        -:  408:		}
        -:  409:	}
    #####:  410:	if ( j >= 3)
    $$$$$:  410-block  0
branch  0 never executed
branch  1 never executed
        -:  411:	{
    #####:  412:		return 1;
    $$$$$:  412-block  0
unconditional  0 never executed
        -:  413:	}
        -:  414:
    #####:  415:	return 0;
    $$$$$:  415-block  0
unconditional  0 never executed
        -:  416:}
        -:  417:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  418:int scoreFor (int player, struct gameState *state) {
    $$$$$:  418-block  0
        -:  419:
        -:  420:	int i;
    #####:  421:	int score = 0;
        -:  422:	//score from hand
    #####:  423:	for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  423-block  0
unconditional  0 never executed
    $$$$$:  423-block  1
unconditional  1 never executed
    $$$$$:  423-block  2
branch  2 never executed
branch  3 never executed
        -:  424:	{
    #####:  425:		if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:		if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:		if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:		if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
unconditional  2 never executed
    #####:  430:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  430-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  430-block  1
call    2 never executed
unconditional  3 never executed
        -:  431:	}
        -:  432:
        -:  433:	//score from discard
    #####:  434:	for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  434-block  0
unconditional  0 never executed
    $$$$$:  434-block  1
unconditional  1 never executed
    $$$$$:  434-block  2
branch  2 never executed
branch  3 never executed
        -:  435:	{
    #####:  436:		if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:		if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:		if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:		if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
unconditional  2 never executed
    #####:  441:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  441-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  441-block  1
call    2 never executed
unconditional  3 never executed
        -:  442:	}
        -:  443:
        -:  444:	//score from deck
    #####:  445:	for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  445-block  0
unconditional  0 never executed
    $$$$$:  445-block  1
unconditional  1 never executed
    $$$$$:  445-block  2
branch  2 never executed
branch  3 never executed
        -:  446:	{
    #####:  447:		if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:		if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:		if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:		if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
unconditional  2 never executed
    #####:  452:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  452-block  1
call    2 never executed
unconditional  3 never executed
        -:  453:	}
        -:  454:
    #####:  455:	return score;
    $$$$$:  455-block  0
unconditional  0 never executed
        -:  456:}
        -:  457:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  458-block  0
        -:  459:	int i;	
        -:  460:	int j;
        -:  461:	int highScore;
        -:  462:	int currentPlayer;
        -:  463:
        -:  464:	//get score for each player
    #####:  465:	for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  465-block  0
unconditional  0 never executed
    $$$$$:  465-block  1
unconditional  1 never executed
    $$$$$:  465-block  2
branch  2 never executed
branch  3 never executed
        -:  466:	{
        -:  467:		//set unused player scores to -9999
    #####:  468:		if (i >= state->numPlayers)
    $$$$$:  468-block  0
branch  0 never executed
branch  1 never executed
        -:  469:		{
    #####:  470:			players[i] = -9999;
    $$$$$:  470-block  0
unconditional  0 never executed
        -:  471:		}
        -:  472:		else
        -:  473:		{
    #####:  474:			players[i] = scoreFor (i, state);
    $$$$$:  474-block  0
call    0 never executed
unconditional  1 never executed
        -:  475:		}
        -:  476:	}
        -:  477:
        -:  478:	//find highest score
    #####:  479:	j = 0;
    #####:  480:	for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  480-block  0
unconditional  0 never executed
    $$$$$:  480-block  1
unconditional  1 never executed
    $$$$$:  480-block  2
branch  2 never executed
branch  3 never executed
        -:  481:	{
    #####:  482:		if (players[i] > players[j])
    $$$$$:  482-block  0
branch  0 never executed
branch  1 never executed
        -:  483:		{
    #####:  484:			j = i;
    $$$$$:  484-block  0
unconditional  0 never executed
        -:  485:		}
        -:  486:	}
    #####:  487:	highScore = players[j];
        -:  488:
        -:  489:	//add 1 to players who had less turns
    #####:  490:	currentPlayer = whoseTurn(state);
    $$$$$:  490-block  0
call    0 never executed
    #####:  491:	for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  491-block  0
unconditional  1 never executed
    $$$$$:  491-block  1
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:		if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  493-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  493-block  1
branch  2 never executed
branch  3 never executed
        -:  494:		{
    #####:  495:			players[i]++;
    $$$$$:  495-block  0
unconditional  0 never executed
        -:  496:		}
        -:  497:	}
        -:  498:
        -:  499:	//find new highest score
    #####:  500:	j = 0;
    #####:  501:	for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  501-block  0
unconditional  0 never executed
    $$$$$:  501-block  1
unconditional  1 never executed
    $$$$$:  501-block  2
branch  2 never executed
branch  3 never executed
        -:  502:	{
    #####:  503:		if ( players[i] > players[j] )
    $$$$$:  503-block  0
branch  0 never executed
branch  1 never executed
        -:  504:		{
    #####:  505:			j = i;
    $$$$$:  505-block  0
unconditional  0 never executed
        -:  506:		}
        -:  507:	}
    #####:  508:	highScore = players[j];
        -:  509:
        -:  510:	//set winners in array to 1 and rest to 0
    #####:  511:	for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  511-block  0
unconditional  0 never executed
    $$$$$:  511-block  1
unconditional  1 never executed
    $$$$$:  511-block  2
branch  2 never executed
branch  3 never executed
        -:  512:	{
    #####:  513:		if ( players[i] == highScore )
    $$$$$:  513-block  0
branch  0 never executed
branch  1 never executed
        -:  514:		{
    #####:  515:			players[i] = 1;
    $$$$$:  515-block  0
unconditional  0 never executed
        -:  516:		}
        -:  517:		else
        -:  518:		{
    #####:  519:			players[i] = 0;
    $$$$$:  519-block  0
unconditional  0 never executed
        -:  520:		}
        -:  521:	}
        -:  522:
    #####:  523:	return 0;
    $$$$$:  523-block  0
unconditional  0 never executed
        -:  524:}
        -:  525:
        -:  526:
        -:  527:/*
        -:  528: * drawCard()
        -:  529: *
        -:  530: * 	@desc
        -:  531: *
        -:  532: * 		Draws a card from the player's deck into the player's hand.
        -:  533: *
        -:  534: *	@pre
        -:  535: *		
        -:  536: *		intialized game state.
        -:  537: *
        -:  538: *	@post
        -:  539: *		
        -:  540: *		if the deck was empty, the discard will be moved to the deck and the
        -:  541: *		discard will therefore be empty.  The deck is shuffled.
        -:  542: */
function drawCard called 13730 returned 100% blocks executed 100%
    13730:  543:int drawCard(int player, struct gameState *state)
    13730:  543-block  0
        -:  544:{
        -:  545:	int count;
        -:  546:	int deckCounter;
        -:  547:
        -:  548:	/*
        -:  549:	 * In the case that the player's deck is empty, the discard pile
        -:  550:	 * will need to be moved to the deck pile and shuffled.
        -:  551:	 */
    13730:  552:	if (state->deckCount[player] <= 0) {
    13730:  552-block  0
branch  0 taken 35 (fallthrough)
branch  1 taken 13695
        -:  553:
        -:  554:		/* 
        -:  555:		 * move the discard pile over to the deck and update the counts
        -:  556:		 * of the deck an discard accordingly.  Then shuffle the deck.
        -:  557:		 */
        -:  558:		int i;
       65:  559:		for (i=0; i < state->discardCount[player]; i++) {
       35:  559-block  0
unconditional  0 taken 35
       30:  559-block  1
unconditional  1 taken 30
       65:  559-block  2
branch  2 taken 30
branch  3 taken 35 (fallthrough)
       30:  560:			state->deck[player][i] = state->discard[player][i];
       30:  561:			state->discard[player][i] = -1;
        -:  562:		}
        -:  563:
       35:  564:		state->deckCount[player] = state->discardCount[player];
       35:  565:		state->discardCount[player] = 0;
        -:  566:
       35:  567:		shuffle(player, state);
       35:  567-block  0
call    0 returned 35
        -:  568:
        -:  569:		if (DEBUG){//Debug statements
        -:  570:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  571:		}
        -:  572:
       35:  573:		state->discardCount[player] = 0;	/* TODO: redundant line? omit? */
        -:  574:
        -:  575:		
        -:  576:		/*
        -:  577:		 * Move the last card out of the deck to the end of the player's hand.  
        -:  578:		 * Update the count of the deck and hand accordingly.
        -:  579:		 */	
       35:  580:		count = state->handCount[player];
unconditional  0 taken 35
        -:  581:
        -:  582:		if (DEBUG){//Debug statements
        -:  583:			printf("Current hand count: %d\n", count);
        -:  584:		}
        -:  585:
       35:  586:		deckCounter = state->deckCount[player];
        -:  587:
       35:  588:		if (deckCounter == 0)
       35:  588-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 3
       32:  589:			return -1;
       32:  589-block  0
unconditional  0 taken 32
        -:  590:
        3:  591:		state->hand[player][count] = state->deck[player][deckCounter - 1];
        3:  592:		state->deckCount[player]--;
        3:  593:		state->handCount[player]++;
        3:  593-block  0
unconditional  0 taken 3
        -:  594:	}
        -:  595:	else {
    13695:  596:		int count = state->handCount[player];
    13695:  596-block  0
unconditional  0 taken 13695
        -:  597:		int deckCounter;
        -:  598:		if (DEBUG){//Debug statements
        -:  599:			printf("Current hand count: %d\n", count);
        -:  600:		}
        -:  601:
        -:  602:		/*
        -:  603:		 * Move the last card out of the deck to the end of the player's hand.  
        -:  604:		 * Update the count of the deck and hand accordingly.
        -:  605:		 */	
    13695:  606:		deckCounter = state->deckCount[player];
    13695:  607:		state->hand[player][count] = state->deck[player][deckCounter - 1];
    13695:  608:		state->deckCount[player]--;
    13695:  609:		state->handCount[player]++;
    13695:  609-block  0
unconditional  0 taken 13695
        -:  610:	}
        -:  611:
    13698:  612:	return 0;
    13698:  612-block  0
unconditional  0 taken 13698
        -:  613:}
        -:  614:
function getCost called 28 returned 100% blocks executed 100%
       28:  615:int getCost(int cardNumber)
       28:  615-block  0
        -:  616:{
       28:  617:	switch( cardNumber ) 
       28:  617-block  0
branch  0 taken 1
branch  1 taken 1
branch  2 taken 1
branch  3 taken 1
branch  4 taken 1
branch  5 taken 1
branch  6 taken 1
branch  7 taken 1
branch  8 taken 1
branch  9 taken 1
branch 10 taken 1
branch 11 taken 1
branch 12 taken 1
branch 13 taken 1
branch 14 taken 1
branch 15 taken 1
branch 16 taken 1
branch 17 taken 1
branch 18 taken 1
branch 19 taken 1
branch 20 taken 1
branch 21 taken 1
branch 22 taken 1
branch 23 taken 1
branch 24 taken 1
branch 25 taken 1
branch 26 taken 1
branch 27 taken 1
        -:  618:	{
        -:  619:		case curse:
        1:  620:			return 0;
        1:  620-block  0
unconditional  0 taken 1
        -:  621:		case estate:
        1:  622:			return 2;
        1:  622-block  0
unconditional  0 taken 1
        -:  623:		case duchy:
        1:  624:			return 5;
        1:  624-block  0
unconditional  0 taken 1
        -:  625:		case province:
        1:  626:			return 8;
        1:  626-block  0
unconditional  0 taken 1
        -:  627:		case copper:
        1:  628:			return 0;
        1:  628-block  0
unconditional  0 taken 1
        -:  629:		case silver:
        1:  630:			return 3;
        1:  630-block  0
unconditional  0 taken 1
        -:  631:		case gold:
        1:  632:			return 6;
        1:  632-block  0
unconditional  0 taken 1
        -:  633:		case adventurer:
        1:  634:			return 6;
        1:  634-block  0
unconditional  0 taken 1
        -:  635:		case council_room:
        1:  636:			return 5;
        1:  636-block  0
unconditional  0 taken 1
        -:  637:		case feast:
        1:  638:			return 4;
        1:  638-block  0
unconditional  0 taken 1
        -:  639:		case gardens:
        1:  640:			return 4;
        1:  640-block  0
unconditional  0 taken 1
        -:  641:		case mine:
        1:  642:			return 5;
        1:  642-block  0
unconditional  0 taken 1
        -:  643:		case remodel:
        1:  644:			return 4;
        1:  644-block  0
unconditional  0 taken 1
        -:  645:		case smithy:
        1:  646:			return 4;
        1:  646-block  0
unconditional  0 taken 1
        -:  647:		case village:
        1:  648:			return 3;
        1:  648-block  0
unconditional  0 taken 1
        -:  649:		case baron:
        1:  650:			return 4;
        1:  650-block  0
unconditional  0 taken 1
        -:  651:		case great_hall:
        1:  652:			return 3;
        1:  652-block  0
unconditional  0 taken 1
        -:  653:		case minion:
        1:  654:			return 5;
        1:  654-block  0
unconditional  0 taken 1
        -:  655:		case steward:
        1:  656:			return 3;
        1:  656-block  0
unconditional  0 taken 1
        -:  657:		case tribute:
        1:  658:			return 5;
        1:  658-block  0
unconditional  0 taken 1
        -:  659:		case ambassador:
        1:  660:			return 3;
        1:  660-block  0
unconditional  0 taken 1
        -:  661:		case cutpurse:
        1:  662:			return 4;
        1:  662-block  0
unconditional  0 taken 1
        -:  663:		case embargo: 
        1:  664:			return 2;
        1:  664-block  0
unconditional  0 taken 1
        -:  665:		case outpost:
        1:  666:			return 5;
        1:  666-block  0
unconditional  0 taken 1
        -:  667:		case salvager:
        1:  668:			return 4;
        1:  668-block  0
unconditional  0 taken 1
        -:  669:		case sea_hag:
        1:  670:			return 4;
        1:  670-block  0
unconditional  0 taken 1
        -:  671:		case treasure_map:
        1:  672:			return 4;
        1:  672-block  0
unconditional  0 taken 1
        -:  673:	}
        -:  674:
        1:  675:	return -1;
        1:  675-block  0
unconditional  0 taken 1
        -:  676:}
        -:  677:
        -:  678:
        -:  679:
        -:  680:
        -:  681:/*
        -:  682: * adventurerEffect()
        -:  683: *
        -:  684: * @params
        -:  685: * 		struct gameState	*state				state of the game.
        -:  686: * 		int					currentPlayer		the current player
        -:  687: *
        -:  688: * @pre
        -:  689: * 		intialized game, current player selected.
        -:  690: * 
        -:  691: * @post
        -:  692: * 		adjusted game state in accordance to effect of card.
        -:  693: *
        -:  694: * @desc
        -:  695: * 		Plays the adventurer card.  It draws from the player's deck until two treasure
        -:  696: * 		cards are drawn.  Cards drawn from the deck which are not treasure go to the
        -:  697: * 		player's discard pile.
        -:  698: */
function adventurerEffect called 36 returned 100% blocks executed 100%
       36:  699:void adventurerEffect(struct gameState *state, int currentPlayer)
       36:  699-block  0
        -:  700:{
        -:  701:	/*
        -:  702:	 * moved these declarations from cardEffect() into here.  TODO: omit them from cardEffect() once
        -:  703:	 * all cards have been refactored accordingly.
        -:  704:	 */
       36:  705:	int 	drawntreasure=0;
        -:  706:	int 	cardDrawn;
        -:  707:	int		temphand[MAX_HAND];
       36:  708:	int		z = 0;		/* counter for the temp hand */
        -:  709:
        -:  710:
        -:  711:
      989:  712:	while (drawntreasure < 2) {
       36:  712-block  0
unconditional  0 taken 36
      989:  712-block  1
branch  1 taken 953
branch  2 taken 36 (fallthrough)
        -:  713:		/* if the deck is empty we need to shuffle discard and add to deck. */
      953:  714:		if ( state->deckCount[currentPlayer] < 1 ) {
      953:  714-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 921
       32:  715:			shuffle(currentPlayer, state);
       32:  715-block  0
call    0 returned 32
unconditional  1 taken 32
        -:  716:		}
        -:  717:
      953:  718:		drawCard(currentPlayer, state);
      953:  718-block  0
call    0 returned 953
        -:  719:
        -:  720:		/* top card of hand is most recently drawn card. */
      953:  721:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -:  722:
      953:  723:		if ( cardDrawn == copper || cardDrawn == gold)// || cardDrawn == silver )	/* TODO: put bug back... */
branch  0 taken 909 (fallthrough)
branch  1 taken 44
      909:  723-block  0
branch  2 taken 28 (fallthrough)
branch  3 taken 881
       72:  724:			drawntreasure++;
       72:  724-block  0
unconditional  0 taken 72
        -:  725:		else {
      881:  726:			temphand[z]=cardDrawn;
        -:  727:
        -:  728:			/* this should just remove the top card (the most recently drawn one). */
      881:  729:			state->handCount[currentPlayer]--; 
      881:  730:			z++;
      881:  730-block  0
unconditional  0 taken 881
        -:  731:		}
        -:  732:	}
      917:  733:	while( z-1 >= 0 ) {
       36:  733-block  0
unconditional  0 taken 36
      917:  733-block  1
branch  1 taken 881
branch  2 taken 36 (fallthrough)
        -:  734:		/* discard all cards in play that have been drawn.*/
      881:  735:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
      881:  736:		z--;
      881:  736-block  0
unconditional  0 taken 881
        -:  737:	}
       36:  738:}
        -:  739:
        -:  740:
        -:  741:
        -:  742:
        -:  743:/*
        -:  744: * smithyEffect()
        -:  745: *
        -:  746: * @params
        -:  747: * 		struct gameState	*state				state of the game.
        -:  748: * 		int					currentPlayer		the current player.
        -:  749: * 		int					handPos				hand position of smithy card.
        -:  750: *
        -:  751: * @pre
        -:  752: * 		intialized game, current player selected.
        -:  753: * 
        -:  754: * @post
        -:  755: * 		adjusted game state in accordance to effect of card.
        -:  756: *
        -:  757: * @desc
        -:  758: * 		Plays the smithy card.  It's an action card which draws three cards from
        -:  759: * 		the player's deck.
        -:  760: */
function smithyEffect called 6 returned 100% blocks executed 100%
        6:  761:void smithyEffect(struct gameState *state, int currentPlayer, int handPos)
        6:  761-block  0
        -:  762:{
        -:  763:	int i;
        -:  764:
       30:  765:	for (i = 0; i < 4; i++)
        6:  765-block  0
unconditional  0 taken 6
unconditional  1 taken 24
       30:  765-block  1
branch  2 taken 24
branch  3 taken 6 (fallthrough)
        -:  766:	{
       24:  767:		drawCard(currentPlayer, state);
       24:  767-block  0
call    0 returned 24
        -:  768:	}
        -:  769:
        -:  770:	/* discard smithy card from hand. */
        6:  771:	discardCard(handPos, currentPlayer, state, 0);
        6:  771-block  0
call    0 returned 6
        6:  772:}
        -:  773:
        -:  774:
        -:  775:
        -:  776:
        -:  777:/*
        -:  778: * remodelEffect()
        -:  779: *
        -:  780: * @params
        -:  781: * 		struct gameState	*state				state of the game.
        -:  782: * 		int					currentPlayer		the current player.
        -:  783: * 		int					handPos				hand position of remodel card.
        -:  784: * 		int					choice1				card chosen to be trashed.
        -:  785: * 		int					choice2				card chosen to be pulled from supply.
        -:  786: *
        -:  787: * @pre
        -:  788: * 		intialized game, current player selected.
        -:  789: * 
        -:  790: * @post
        -:  791: * 		adjusted game state in accordance to effect of card.
        -:  792: *
        -:  793: * @desc
        -:  794: * 		Plays the remodel card.  It's an action card which allows you to trash a card from your hand.
        -:  795: * 		the player may pull a card from the supply costing up to two more than the trashed card.  
        -:  796: * 		the card pulled from supply goes to the discard pile.
        -:  797: */
function remodelEffect called 0 returned 0% blocks executed 0%
    #####:  798:void remodelEffect(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
    $$$$$:  798-block  0
        -:  799:{
        -:  800:	int j;
        -:  801:	int i;
        -:  802:
        -:  803:	/* store card we will trash. */
    #####:  804:	j = state->hand[currentPlayer][choice1];  
        -:  805:
    #####:  806:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  806-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  807:	{
    #####:  808:		return -1;
    $$$$$:  808-block  0
unconditional  0 never executed
        -:  809:	}
        -:  810:
    #####:  811:	gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  811-block  0
call    0 never executed
        -:  812:
        -:  813:	/* discard remodel card from hand. */
    #####:  814:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  815:
        -:  816:	/* discard trashed card. */
    #####:  817:	for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  817-block  0
unconditional  1 never executed
    $$$$$:  817-block  1
branch  2 never executed
branch  3 never executed
        -:  818:	{
    #####:  819:		if (state->hand[currentPlayer][i] == j)
    $$$$$:  819-block  0
branch  0 never executed
branch  1 never executed
        -:  820:		{
    #####:  821:			discardCard(i, currentPlayer, state, 0);			
    $$$$$:  821-block  0
call    0 never executed
    #####:  822:			break;
unconditional  0 never executed
        -:  823:		}
        -:  824:	}
        -:  825:}
        -:  826:
        -:  827:
        -:  828:
        -:  829:
        -:  830:/*
        -:  831: * villageEffect()
        -:  832: *
        -:  833: * @params
        -:  834: * 		struct gameState	*state				state of the game.
        -:  835: * 		int					currentPlayer		the current player.
        -:  836: * 		int					handPos				hand position of village card.
        -:  837: *
        -:  838: * @pre
        -:  839: * 		intialized game, current player selected.
        -:  840: * 
        -:  841: * @post
        -:  842: * 		adjusted game state in accordance to effect of card.
        -:  843: *
        -:  844: * @desc
        -:  845: * 		Plays the village card.  It's an action card in which the player draws 
        -:  846: * 		1 card from the player's deck, and allows two more actions on the 
        -:  847: * 		player's turn.
        -:  848: */
function villageEffect called 4 returned 100% blocks executed 100%
        4:  849:void villageEffect(struct gameState *state, int currentPlayer, int handPos)
        4:  849-block  0
        -:  850:{
        -:  851:	/* +1 Card */
        4:  852:	drawCard(currentPlayer, state);
        4:  852-block  0
call    0 returned 4
        -:  853:
        -:  854:	/* +2 Actions */
        4:  855:	state->numActions += 3;
        -:  856:
        -:  857:	/* discard played card from hand */
        4:  858:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        4:  859:}
        -:  860:
        -:  861:
        -:  862:
        -:  863:
        -:  864:/*
        -:  865: * great_hallEffect()
        -:  866: *
        -:  867: * @params
        -:  868: * 		struct gameState	*state				state of the game.
        -:  869: * 		int					currentPlayer		the current player.
        -:  870: * 		int					handPos				hand position of great_hall card.
        -:  871: *
        -:  872: * @pre
        -:  873: * 		intialized game, current player selected.
        -:  874: * 
        -:  875: * @post
        -:  876: * 		adjusted game state in accordance to effect of card.
        -:  877: *
        -:  878: * @desc
        -:  879: * 		Plays the great_hall card.  It's an action card in which the player draws 
        -:  880: * 		1 card from the player's deck, and allows one more actions on the 
        -:  881: * 		player's turn.
        -:  882: */
function great_hallEffect called 4 returned 100% blocks executed 100%
        4:  883:void great_hallEffect(struct gameState *state, int currentPlayer, int handPos)
        4:  883-block  0
        -:  884:{
        -:  885:	/* +1 Card */
        4:  886:	drawCard(currentPlayer, state);
        4:  886-block  0
call    0 returned 4
        -:  887:
        -:  888:	/* +1 Actions */
        4:  889:	state->numActions++;
        -:  890:
        -:  891:	/*i discard card from hand. */
        4:  892:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        4:  893:}
        -:  894:
function cardEffect called 50 returned 100% blocks executed 6%
       50:  895:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
       50:  895-block  0
        -:  896:{
        -:  897:	int k;
        -:  898:	int x;
        -:  899:	int index;
       50:  900:	int currentPlayer = whoseTurn(state);
       50:  900-block  0
call    0 returned 50
       50:  901:	int nextPlayer = currentPlayer + 1;
       50:  902:	int tributeRevealedCards[2] = {-1, -1};
        -:  903:
        -:  904:
        -:  905:	
        -:  906:	/* 
        -:  907:	 * TODO: 	once all the individual effects are refactored into their own functions, omit these 
        -:  908:	 * 			delecrations in the chunk of code below.
        -:  909:	 */
       50:  910:	int drawntreasure=0;	
        -:  911:	int cardDrawn;
        -:  912:	int temphand[MAX_HAND];// moved above the if statement
       50:  913:	int z = 0;// this is the counter for the temp hand
        -:  914:	int i;
        -:  915:	int j;
        -:  916:
        -:  917:
        -:  918:
        -:  919:
        -:  920:
       50:  921:	if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 50
    #####:  922:		nextPlayer = 0;
    $$$$$:  922-block  0
unconditional  0 never executed
        -:  923:	}
        -:  924:
        -:  925:
        -:  926:	//uses switch to select card and perform actions
       50:  927:	switch( card ) 
       50:  927-block  0
branch  0 taken 36
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 6
branch  7 taken 4
branch  8 taken 0
branch  9 taken 4
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  928:	{
        -:  929:		case adventurer:
       36:  930:			adventurerEffect(state, currentPlayer);
       36:  930-block  0
call    0 returned 36
       36:  931:			return 0;
unconditional  0 taken 36
        -:  932:
        -:  933:		case council_room:
        -:  934:			//+4 Cards
    #####:  935:			for (i = 0; i < 4; i++)
    $$$$$:  935-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  935-block  1
branch  2 never executed
branch  3 never executed
        -:  936:			{
    #####:  937:				drawCard(currentPlayer, state);
    $$$$$:  937-block  0
call    0 never executed
        -:  938:			}
        -:  939:
        -:  940:			//+1 Buy
    #####:  941:			state->numBuys++;
        -:  942:
        -:  943:			//Each other player draws a card
    #####:  944:			for (i = 0; i < state->numPlayers; i++)
    $$$$$:  944-block  0
unconditional  0 never executed
    $$$$$:  944-block  1
unconditional  1 never executed
    $$$$$:  944-block  2
branch  2 never executed
branch  3 never executed
        -:  945:			{
    #####:  946:				if ( i != currentPlayer )
    $$$$$:  946-block  0
branch  0 never executed
branch  1 never executed
        -:  947:				{
    #####:  948:					drawCard(i, state);
    $$$$$:  948-block  0
call    0 never executed
unconditional  1 never executed
        -:  949:				}
        -:  950:			}
        -:  951:
        -:  952:			//put played card in played card pile
    #####:  953:			discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  953-block  0
call    0 never executed
        -:  954:
    #####:  955:			return 0;
unconditional  0 never executed
        -:  956:
        -:  957:		case feast:
        -:  958:			//gain card with cost up to 5
        -:  959:			//Backup hand
    #####:  960:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  960-block  0
unconditional  0 never executed
    $$$$$:  960-block  1
unconditional  1 never executed
    $$$$$:  960-block  2
branch  2 never executed
branch  3 never executed
    #####:  961:				temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  962:				state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  963:			}
        -:  964:			//Backup hand
        -:  965:
        -:  966:			//Update Coins for Buy
    #####:  967:			updateCoins(currentPlayer, state, 5);
    $$$$$:  967-block  0
call    0 never executed
    #####:  968:			x = 1;//Condition to loop on
    #####:  969:			while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  969-block  0
branch  1 never executed
branch  2 never executed
    #####:  970:				if (supplyCount(choice1, state) <= 0){
    $$$$$:  970-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  971:					if (DEBUG)
        -:  972:						printf("None of that card left, sorry!\n");
        -:  973:
        -:  974:					if (DEBUG){
        -:  975:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  976:					}
        -:  977:				}
    #####:  978:				else if (state->coins < getCost(choice1)){
    $$$$$:  978-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  979:					printf("That card is too expensive!\n");
    $$$$$:  979-block  0
call    0 never executed
unconditional  1 never executed
        -:  980:
        -:  981:					if (DEBUG){
        -:  982:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  983:					}
        -:  984:				}
        -:  985:				else{
        -:  986:
        -:  987:					if (DEBUG){
        -:  988:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  989:					}
        -:  990:
    #####:  991:					gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  991-block  0
call    0 never executed
    #####:  992:					x = 0;//No more buying cards
unconditional  0 never executed
        -:  993:
        -:  994:					if (DEBUG){
        -:  995:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  996:					}
        -:  997:
        -:  998:				}
        -:  999:			}     
        -: 1000:
        -: 1001:			//Reset Hand
    #####: 1002:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$: 1002-block  0
unconditional  0 never executed
    $$$$$: 1002-block  1
unconditional  1 never executed
    $$$$$: 1002-block  2
branch  2 never executed
branch  3 never executed
    #####: 1003:				state->hand[currentPlayer][i] = temphand[i];
    #####: 1004:				temphand[i] = -1;
        -: 1005:			}
        -: 1006:			//Reset Hand
        -: 1007:
    #####: 1008:			return 0;
    $$$$$: 1008-block  0
unconditional  0 never executed
        -: 1009:
        -: 1010:		case gardens:
    #####: 1011:			return -1;
    $$$$$: 1011-block  0
unconditional  0 never executed
        -: 1012:
        -: 1013:		case mine:
    #####: 1014:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1015:
    #####: 1016:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$: 1016-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1016-block  1
branch  2 never executed
branch  3 never executed
        -: 1017:			{
    #####: 1018:				return -1;
    $$$$$: 1018-block  0
unconditional  0 never executed
        -: 1019:			}
        -: 1020:
    #####: 1021:			if (choice2 > treasure_map || choice2 < curse)
    $$$$$: 1021-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1021-block  1
branch  2 never executed
branch  3 never executed
        -: 1022:			{
    #####: 1023:				return -1;
    $$$$$: 1023-block  0
unconditional  0 never executed
        -: 1024:			}
        -: 1025:
    #####: 1026:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$: 1026-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1027:			{
    #####: 1028:				return -1;
    $$$$$: 1028-block  0
unconditional  0 never executed
        -: 1029:			}
        -: 1030:
    #####: 1031:			gainCard(choice2, state, 2, currentPlayer);
    $$$$$: 1031-block  0
call    0 never executed
        -: 1032:
        -: 1033:			//discard card from hand
    #####: 1034:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1035:
        -: 1036:			//discard trashed card
    #####: 1037:			for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$: 1037-block  0
unconditional  1 never executed
    $$$$$: 1037-block  1
branch  2 never executed
branch  3 never executed
        -: 1038:			{
    #####: 1039:				if (state->hand[currentPlayer][i] == j)
    $$$$$: 1039-block  0
branch  0 never executed
branch  1 never executed
        -: 1040:				{
    #####: 1041:					discardCard(i, currentPlayer, state, 0);			
    $$$$$: 1041-block  0
call    0 never executed
    #####: 1042:					break;
unconditional  0 never executed
        -: 1043:				}
        -: 1044:			}
        -: 1045:
    #####: 1046:			return 0;
    $$$$$: 1046-block  0
unconditional  0 never executed
        -: 1047:
        -: 1048:		case remodel:
    #####: 1049:			remodelEffect(state, currentPlayer, handPos, choice1, choice2);
    $$$$$: 1049-block  0
call    0 never executed
    #####: 1050:			return 0;
unconditional  0 never executed
        -: 1051:
        -: 1052:		case smithy:
        6: 1053:			smithyEffect(state, currentPlayer, handPos);
        6: 1053-block  0
call    0 returned 6
        6: 1054:			return 0;
unconditional  0 taken 6
        -: 1055:
        -: 1056:		case village:
        4: 1057:			villageEffect(state, currentPlayer, handPos);
        4: 1057-block  0
call    0 returned 4
        4: 1058:			return 0;
unconditional  0 taken 4
        -: 1059:
        -: 1060:		case baron:
    #####: 1061:			state->numBuys++;//Increase buys by 1!
    #####: 1062:			if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$: 1062-block  0
branch  0 never executed
branch  1 never executed
    #####: 1063:				int p = 0;//Iterator for hand!
    #####: 1064:				int card_not_discarded = 1;//Flag for discard set!
    #####: 1065:				while(card_not_discarded){
    $$$$$: 1065-block  0
unconditional  0 never executed
    $$$$$: 1065-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1065-block  2
unconditional  3 never executed
    #####: 1066:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$: 1066-block  0
branch  0 never executed
branch  1 never executed
    #####: 1067:						state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1068:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1069:						state->discardCount[currentPlayer]++;
    #####: 1070:						for (;p < state->handCount[currentPlayer]; p++){
    $$$$$: 1070-block  0
unconditional  0 never executed
    $$$$$: 1070-block  1
unconditional  1 never executed
    $$$$$: 1070-block  2
branch  2 never executed
branch  3 never executed
    #####: 1071:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1072:						}
    #####: 1073:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1074:						state->handCount[currentPlayer]--;
    #####: 1075:						card_not_discarded = 0;//Exit the loop
    $$$$$: 1075-block  0
unconditional  0 never executed
        -: 1076:					}
    #####: 1077:					else if (p > state->handCount[currentPlayer]){
    $$$$$: 1077-block  0
branch  0 never executed
branch  1 never executed
        -: 1078:						if(DEBUG) {
        -: 1079:							printf("No estate cards in your hand, invalid choice\n");
        -: 1080:							printf("Must gain an estate if there are any\n");
        -: 1081:						}
    #####: 1082:						if (supplyCount(estate, state) > 0){
    $$$$$: 1082-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1083:							gainCard(estate, state, 0, currentPlayer);
    $$$$$: 1083-block  0
call    0 never executed
    #####: 1084:							state->supplyCount[estate]--;//Decrement estates
    #####: 1085:							if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1086:								isGameOver(state);
    $$$$$: 1086-block  0
call    0 never executed
unconditional  1 never executed
        -: 1087:							}
        -: 1088:						}
    #####: 1089:						card_not_discarded = 0;//Exit the loop
    $$$$$: 1089-block  0
unconditional  0 never executed
        -: 1090:					}
        -: 1091:
        -: 1092:					else{
    #####: 1093:						p++;//Next card
    $$$$$: 1093-block  0
unconditional  0 never executed
        -: 1094:					}
        -: 1095:				}
        -: 1096:			}
        -: 1097:
        -: 1098:			else{
    #####: 1099:				if (supplyCount(estate, state) > 0){
    $$$$$: 1099-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1100:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$: 1100-block  0
call    0 never executed
    #####: 1101:					state->supplyCount[estate]--;//Decrement Estates
    #####: 1102:					if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1103:						isGameOver(state);
    $$$$$: 1103-block  0
call    0 never executed
unconditional  1 never executed
        -: 1104:					}
        -: 1105:				}
        -: 1106:			}
        -: 1107:
        -: 1108:
    #####: 1109:			return 0;
    $$$$$: 1109-block  0
unconditional  0 never executed
        -: 1110:
        -: 1111:		case great_hall:
        4: 1112:			great_hallEffect(state, currentPlayer, handPos);
        4: 1112-block  0
call    0 returned 4
        4: 1113:			return 0;
unconditional  0 taken 4
        -: 1114:
        -: 1115:		case minion:
        -: 1116:			//+1 action
    #####: 1117:			state->numActions++;
        -: 1118:
        -: 1119:			//discard card from hand
    #####: 1120:			discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1120-block  0
call    0 never executed
        -: 1121:
    #####: 1122:			if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1123:			{
    #####: 1124:				state->coins = state->coins + 2;
    $$$$$: 1124-block  0
unconditional  0 never executed
        -: 1125:			}
        -: 1126:
    #####: 1127:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$: 1127-block  0
branch  0 never executed
branch  1 never executed
        -: 1128:			{
        -: 1129:				//discard hand
    #####: 1130:				while(numHandCards(state) > 0)
    $$$$$: 1130-block  0
unconditional  0 never executed
    $$$$$: 1130-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1131:				{
    #####: 1132:					discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1132-block  0
call    0 never executed
unconditional  1 never executed
        -: 1133:				}
        -: 1134:
        -: 1135:				//draw 4
    #####: 1136:				for (i = 0; i < 4; i++)
    $$$$$: 1136-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1136-block  1
branch  2 never executed
branch  3 never executed
        -: 1137:				{
    #####: 1138:					drawCard(currentPlayer, state);
    $$$$$: 1138-block  0
call    0 never executed
        -: 1139:				}
        -: 1140:
        -: 1141:				//other players discard hand and redraw if hand size > 4
    #####: 1142:				for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1142-block  0
unconditional  0 never executed
    $$$$$: 1142-block  1
unconditional  1 never executed
    $$$$$: 1142-block  2
branch  2 never executed
branch  3 never executed
        -: 1143:				{
    #####: 1144:					if (i != currentPlayer)
    $$$$$: 1144-block  0
branch  0 never executed
branch  1 never executed
        -: 1145:					{
    #####: 1146:						if ( state->handCount[i] > 4 )
    $$$$$: 1146-block  0
branch  0 never executed
branch  1 never executed
        -: 1147:						{
        -: 1148:							//discard hand
    #####: 1149:							while( state->handCount[i] > 0 )
    $$$$$: 1149-block  0
unconditional  0 never executed
    $$$$$: 1149-block  1
branch  1 never executed
branch  2 never executed
        -: 1150:							{
    #####: 1151:								discardCard(handPos, i, state, 0);
    $$$$$: 1151-block  0
call    0 never executed
unconditional  1 never executed
        -: 1152:							}
        -: 1153:
        -: 1154:							//draw 4
    #####: 1155:							for (j = 0; j < 4; j++)
    $$$$$: 1155-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1155-block  1
branch  2 never executed
branch  3 never executed
        -: 1156:							{
    #####: 1157:								drawCard(i, state);
    $$$$$: 1157-block  0
call    0 never executed
        -: 1158:							}
        -: 1159:						}
        -: 1160:					}
        -: 1161:				}
        -: 1162:
        -: 1163:			}
    #####: 1164:			return 0;
    $$$$$: 1164-block  0
unconditional  0 never executed
        -: 1165:
        -: 1166:		case steward:
    #####: 1167:			if (choice1 == 1)
    $$$$$: 1167-block  0
branch  0 never executed
branch  1 never executed
        -: 1168:			{
        -: 1169:				//+2 cards
    #####: 1170:				drawCard(currentPlayer, state);
    $$$$$: 1170-block  0
call    0 never executed
    #####: 1171:				drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1172:			}
    #####: 1173:			else if (choice1 == 2)
    $$$$$: 1173-block  0
branch  0 never executed
branch  1 never executed
        -: 1174:			{
        -: 1175:				//+2 coins
    #####: 1176:				state->coins = state->coins + 2;
    $$$$$: 1176-block  0
unconditional  0 never executed
        -: 1177:			}
        -: 1178:			else
        -: 1179:			{
        -: 1180:				//trash 2 cards in hand
    #####: 1181:				discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1181-block  0
call    0 never executed
    #####: 1182:				discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1183:			}
        -: 1184:
        -: 1185:			//discard card from hand
    #####: 1186:			discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1186-block  0
call    0 never executed
    #####: 1187:			return 0;
unconditional  0 never executed
        -: 1188:
        -: 1189:		case tribute:
    #####: 1190:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1190-block  0
branch  0 never executed
branch  1 never executed
    #####: 1191:				if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1191-block  0
branch  0 never executed
branch  1 never executed
    #####: 1192:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1193:					state->deckCount[nextPlayer]--;
    $$$$$: 1193-block  0
unconditional  0 never executed
        -: 1194:				}
    #####: 1195:				else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1195-block  0
branch  0 never executed
branch  1 never executed
    #####: 1196:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1197:					state->discardCount[nextPlayer]--;
    $$$$$: 1197-block  0
unconditional  0 never executed
        -: 1198:				}
        -: 1199:				else{
        -: 1200:					//No Card to Reveal
        -: 1201:					if (DEBUG){
        -: 1202:						printf("No cards to reveal\n");
        -: 1203:					}
        -: 1204:				}
        -: 1205:			}
        -: 1206:
        -: 1207:			else{
    #####: 1208:				if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1208-block  0
branch  0 never executed
branch  1 never executed
    #####: 1209:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1209-block  0
unconditional  0 never executed
    $$$$$: 1209-block  1
unconditional  1 never executed
    $$$$$: 1209-block  2
branch  2 never executed
branch  3 never executed
    #####: 1210:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1211:						state->deckCount[nextPlayer]++;
    #####: 1212:						state->discard[nextPlayer][i] = -1;
    #####: 1213:						state->discardCount[nextPlayer]--;
        -: 1214:					}
        -: 1215:
    #####: 1216:					shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1216-block  0
call    0 never executed
unconditional  1 never executed
        -: 1217:				} 
    #####: 1218:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1219:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1220:				state->deckCount[nextPlayer]--;
    #####: 1221:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1222:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1223:				state->deckCount[nextPlayer]--;
    $$$$$: 1223-block  0
unconditional  0 never executed
        -: 1224:			}    
        -: 1225:
    #####: 1226:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1226-block  0
branch  0 never executed
branch  1 never executed
    #####: 1227:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1228:				state->playedCardCount++;
    #####: 1229:				tributeRevealedCards[1] = -1;
    $$$$$: 1229-block  0
unconditional  0 never executed
        -: 1230:			}
        -: 1231:
    #####: 1232:			for (i = 0; i <= 2; i ++){
    $$$$$: 1232-block  0
unconditional  0 never executed
    $$$$$: 1232-block  1
unconditional  1 never executed
    $$$$$: 1232-block  2
branch  2 never executed
branch  3 never executed
    #####: 1233:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1233-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1233-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1233-block  2
branch  4 never executed
branch  5 never executed
    #####: 1234:					state->coins += 2;
    $$$$$: 1234-block  0
unconditional  0 never executed
        -: 1235:				}
        -: 1236:
    #####: 1237:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1237-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1237-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1237-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1237-block  4
branch  8 never executed
branch  9 never executed
    #####: 1238:					drawCard(currentPlayer, state);
    $$$$$: 1238-block  0
call    0 never executed
    #####: 1239:					drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1240:				}
        -: 1241:				else{//Action Card
    #####: 1242:					state->numActions = state->numActions + 2;
    $$$$$: 1242-block  0
unconditional  0 never executed
        -: 1243:				}
        -: 1244:			}
        -: 1245:
    #####: 1246:			return 0;
    $$$$$: 1246-block  0
unconditional  0 never executed
        -: 1247:
        -: 1248:		case ambassador:
    #####: 1249:			j = 0;		//used to check if player has enough cards to discard
        -: 1250:
    #####: 1251:			if (choice2 > 2 || choice2 < 0)
    $$$$$: 1251-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1251-block  1
branch  2 never executed
branch  3 never executed
        -: 1252:			{
    #####: 1253:				return -1;				
    $$$$$: 1253-block  0
unconditional  0 never executed
        -: 1254:			}
        -: 1255:
    #####: 1256:			if (choice1 == handPos)
    $$$$$: 1256-block  0
branch  0 never executed
branch  1 never executed
        -: 1257:			{
    #####: 1258:				return -1;
    $$$$$: 1258-block  0
unconditional  0 never executed
        -: 1259:			}
        -: 1260:
    #####: 1261:			for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1261-block  0
unconditional  0 never executed
    $$$$$: 1261-block  1
unconditional  1 never executed
    $$$$$: 1261-block  2
branch  2 never executed
branch  3 never executed
        -: 1262:			{
    #####: 1263:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1263-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1263-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1263-block  2
branch  4 never executed
branch  5 never executed
        -: 1264:				{
    #####: 1265:					j++;
    $$$$$: 1265-block  0
unconditional  0 never executed
        -: 1266:				}
        -: 1267:			}
    #####: 1268:			if (j < choice2)
    $$$$$: 1268-block  0
branch  0 never executed
branch  1 never executed
        -: 1269:			{
    #####: 1270:				return -1;				
    $$$$$: 1270-block  0
unconditional  0 never executed
        -: 1271:			}
        -: 1272:
        -: 1273:			if (DEBUG) 
        -: 1274:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1275:
        -: 1276:			//increase supply count for choosen card by amount being discarded
    #####: 1277:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1278:
        -: 1279:			//each other player gains a copy of revealed card
    #####: 1280:			for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1280-block  0
unconditional  0 never executed
    $$$$$: 1280-block  1
unconditional  1 never executed
    $$$$$: 1280-block  2
branch  2 never executed
branch  3 never executed
        -: 1281:			{
    #####: 1282:				if (i != currentPlayer)
    $$$$$: 1282-block  0
branch  0 never executed
branch  1 never executed
        -: 1283:				{
    #####: 1284:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1284-block  0
call    0 never executed
unconditional  1 never executed
        -: 1285:				}
        -: 1286:			}
        -: 1287:
        -: 1288:			//discard played card from hand
    #####: 1289:			discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1289-block  0
call    0 never executed
        -: 1290:
        -: 1291:			//trash copies of cards returned to supply
    #####: 1292:			for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1292-block  0
unconditional  1 never executed
    $$$$$: 1292-block  1
branch  2 never executed
branch  3 never executed
        -: 1293:			{
    #####: 1294:				for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1294-block  0
unconditional  0 never executed
    $$$$$: 1294-block  1
unconditional  1 never executed
    $$$$$: 1294-block  2
branch  2 never executed
branch  3 never executed
        -: 1295:				{
    #####: 1296:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1296-block  0
branch  0 never executed
branch  1 never executed
        -: 1297:					{
    #####: 1298:						discardCard(i, currentPlayer, state, 1);
    $$$$$: 1298-block  0
call    0 never executed
    #####: 1299:						break;
unconditional  0 never executed
        -: 1300:					}
        -: 1301:				}
        -: 1302:			}			
        -: 1303:
    #####: 1304:			return 0;
    $$$$$: 1304-block  0
unconditional  0 never executed
        -: 1305:
        -: 1306:		case cutpurse:
        -: 1307:
    #####: 1308:			updateCoins(currentPlayer, state, 2);
    $$$$$: 1308-block  0
call    0 never executed
    #####: 1309:			for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1309-block  0
unconditional  1 never executed
    $$$$$: 1309-block  1
branch  2 never executed
branch  3 never executed
        -: 1310:			{
    #####: 1311:				if (i != currentPlayer)
    $$$$$: 1311-block  0
branch  0 never executed
branch  1 never executed
        -: 1312:				{
    #####: 1313:					for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1313-block  0
unconditional  0 never executed
    $$$$$: 1313-block  1
unconditional  1 never executed
    $$$$$: 1313-block  2
branch  2 never executed
branch  3 never executed
        -: 1314:					{
    #####: 1315:						if (state->hand[i][j] == copper)
    $$$$$: 1315-block  0
branch  0 never executed
branch  1 never executed
        -: 1316:						{
    #####: 1317:							discardCard(j, i, state, 0);
    $$$$$: 1317-block  0
call    0 never executed
    #####: 1318:							break;
unconditional  0 never executed
        -: 1319:						}
    #####: 1320:						if (j == state->handCount[i])
    $$$$$: 1320-block  0
branch  0 never executed
branch  1 never executed
        -: 1321:						{
    #####: 1322:							for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1322-block  0
unconditional  0 never executed
    $$$$$: 1322-block  1
unconditional  1 never executed
    $$$$$: 1322-block  2
branch  2 never executed
branch  3 never executed
        -: 1323:							{
        -: 1324:								if (DEBUG)
        -: 1325:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1326:							}	
    #####: 1327:							break;
    $$$$$: 1327-block  0
unconditional  0 never executed
        -: 1328:						}		
        -: 1329:					}
        -: 1330:
        -: 1331:				}
        -: 1332:
        -: 1333:			}				
        -: 1334:
        -: 1335:			//discard played card from hand
    #####: 1336:			discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1336-block  0
call    0 never executed
        -: 1337:
    #####: 1338:			return 0;
unconditional  0 never executed
        -: 1339:
        -: 1340:
        -: 1341:		case embargo: 
        -: 1342:			//+2 Coins
    #####: 1343:			state->coins = state->coins + 2;
        -: 1344:
        -: 1345:			//see if selected pile is in play
    #####: 1346:			if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1346-block  0
branch  0 never executed
branch  1 never executed
        -: 1347:			{
    #####: 1348:				return -1;
    $$$$$: 1348-block  0
unconditional  0 never executed
        -: 1349:			}
        -: 1350:
        -: 1351:			//add embargo token to selected supply pile
    #####: 1352:			state->embargoTokens[choice1]++;
        -: 1353:
        -: 1354:			//trash card
    #####: 1355:			discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1355-block  0
call    0 never executed
    #####: 1356:			return 0;
unconditional  0 never executed
        -: 1357:
        -: 1358:		case outpost:
        -: 1359:			//set outpost flag
    #####: 1360:			state->outpostPlayed++;
        -: 1361:
        -: 1362:			//discard card
    #####: 1363:			discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1363-block  0
call    0 never executed
    #####: 1364:			return 0;
unconditional  0 never executed
        -: 1365:
        -: 1366:		case salvager:
        -: 1367:			//+1 buy
    #####: 1368:			state->numBuys++;
        -: 1369:
    #####: 1370:			if (choice1)
    $$$$$: 1370-block  0
branch  0 never executed
branch  1 never executed
        -: 1371:			{
        -: 1372:				//gain coins equal to trashed card
    #####: 1373:				state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1373-block  0
call    0 never executed
call    1 never executed
        -: 1374:				//trash card
    #####: 1375:				discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1376:			}
        -: 1377:
        -: 1378:			//discard card
    #####: 1379:			discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1379-block  0
call    0 never executed
    #####: 1380:			return 0;
unconditional  0 never executed
        -: 1381:
        -: 1382:		case sea_hag:
    #####: 1383:			for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1383-block  0
unconditional  0 never executed
    $$$$$: 1383-block  1
unconditional  1 never executed
    $$$$$: 1383-block  2
branch  2 never executed
branch  3 never executed
    #####: 1384:				if (i != currentPlayer){
    $$$$$: 1384-block  0
branch  0 never executed
branch  1 never executed
    #####: 1385:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1386:					state->discardCount[i]++;
    #####: 1387:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1387-block  0
unconditional  0 never executed
        -: 1388:				}
        -: 1389:			}
    #####: 1390:			return 0;
    $$$$$: 1390-block  0
unconditional  0 never executed
        -: 1391:
        -: 1392:		case treasure_map:
        -: 1393:			//search hand for another treasure_map
    #####: 1394:			index = -1;
    #####: 1395:			for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1395-block  0
unconditional  0 never executed
    $$$$$: 1395-block  1
unconditional  1 never executed
    $$$$$: 1395-block  2
branch  2 never executed
branch  3 never executed
        -: 1396:			{
    #####: 1397:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1397-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1397-block  1
branch  2 never executed
branch  3 never executed
        -: 1398:				{
    #####: 1399:					index = i;
    #####: 1400:					break;
    $$$$$: 1400-block  0
unconditional  0 never executed
        -: 1401:				}
        -: 1402:			}
    #####: 1403:			if (index > -1)
    $$$$$: 1403-block  0
branch  0 never executed
branch  1 never executed
        -: 1404:			{
        -: 1405:				//trash both treasure cards
    #####: 1406:				discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1406-block  0
call    0 never executed
    #####: 1407:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1408:
        -: 1409:				//gain 4 Gold cards
    #####: 1410:				for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1410-block  0
branch  2 never executed
branch  3 never executed
        -: 1411:				{
    #####: 1412:					gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1412-block  0
call    0 never executed
        -: 1413:				}
        -: 1414:
        -: 1415:				//return success
    #####: 1416:				return 1;
    $$$$$: 1416-block  0
unconditional  0 never executed
        -: 1417:			}
        -: 1418:
        -: 1419:			//no second treasure_map found in hand
    #####: 1420:			return -1;
    $$$$$: 1420-block  0
unconditional  0 never executed
        -: 1421:	}
        -: 1422:
       50: 1423:	return -1;
    $$$$$: 1423-block  0
unconditional  0 never executed
       50: 1423-block  1
unconditional  1 taken 50
        -: 1424:}
        -: 1425:
function discardCard called 14 returned 100% blocks executed 78%
       14: 1426:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
       14: 1426-block  0
        -: 1427:{
        -: 1428:	//if card is not trashed, added to Played pile 
       14: 1429:	if (trashFlag < 1)
       14: 1429-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 0
        -: 1430:	{
        -: 1431:		//add card to played pile
       14: 1432:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       14: 1433:		state->playedCardCount++;
       14: 1433-block  0
unconditional  0 taken 14
        -: 1434:	}
        -: 1435:
        -: 1436:	//set played card to -1
       14: 1437:	state->hand[currentPlayer][handPos] = -1;
        -: 1438:
        -: 1439:	//remove card from player's hand
       14: 1440:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
       14: 1440-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 14
        -: 1441:	{
        -: 1442:		//reduce number of cards in hand
    #####: 1443:		state->handCount[currentPlayer]--;
    $$$$$: 1443-block  0
unconditional  0 never executed
        -: 1444:	}
       14: 1445:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
       14: 1445-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 14
        -: 1446:	{
        -: 1447:		//reduce number of cards in hand
    #####: 1448:		state->handCount[currentPlayer]--;
    $$$$$: 1448-block  0
unconditional  0 never executed
        -: 1449:	}
        -: 1450:	else 	
        -: 1451:	{
        -: 1452:		//replace discarded card with last card in hand
       14: 1453:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1454:		//set last card to -1
       14: 1455:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1456:		//reduce number of cards in hand
       14: 1457:		state->handCount[currentPlayer]--;
       14: 1457-block  0
unconditional  0 taken 14
        -: 1458:	}
        -: 1459:
       14: 1460:	return 0;
       14: 1460-block  0
unconditional  0 taken 14
        -: 1461:}
        -: 1462:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1463:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1463-block  0
        -: 1464:{
        -: 1465:	//Note: supplyPos is enum of choosen card
        -: 1466:
        -: 1467:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1468:	if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1468-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1469:	{
    #####: 1470:		return -1;
    $$$$$: 1470-block  0
unconditional  0 never executed
        -: 1471:	}
        -: 1472:
        -: 1473:	//added card for [whoseTurn] current player:
        -: 1474:	// toFlag = 0 : add to discard
        -: 1475:	// toFlag = 1 : add to deck
        -: 1476:	// toFlag = 2 : add to hand
        -: 1477:
    #####: 1478:	if (toFlag == 1)
    $$$$$: 1478-block  0
branch  0 never executed
branch  1 never executed
        -: 1479:	{
    #####: 1480:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1481:		state->deckCount[player]++;
    $$$$$: 1481-block  0
unconditional  0 never executed
        -: 1482:	}
    #####: 1483:	else if (toFlag == 2)
    $$$$$: 1483-block  0
branch  0 never executed
branch  1 never executed
        -: 1484:	{
    #####: 1485:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1486:		state->handCount[player]++;
    $$$$$: 1486-block  0
unconditional  0 never executed
        -: 1487:	}
        -: 1488:	else
        -: 1489:	{
    #####: 1490:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1491:		state->discardCount[player]++;
    $$$$$: 1491-block  0
unconditional  0 never executed
        -: 1492:	}
        -: 1493:
        -: 1494:	//decrease number in supply pile
    #####: 1495:	state->supplyCount[supplyPos]--;
        -: 1496:
    #####: 1497:	return 0;
    $$$$$: 1497-block  0
unconditional  0 never executed
        -: 1498:}
        -: 1499:
        -: 1500:
        -: 1501:
        -: 1502:/*
        -: 1503: * updateCoins()
        -: 1504: *
        -: 1505: * 	@desc
        -: 1506: * 		computes the number of coins a player has for a hand based on
        -: 1507: * 		the number of treasury cards and bonus amount.
        -: 1508: *
        -: 1509: * 	@params
        -: 1510: * 		int		player					The player of the hand.
        -: 1511: * 		struct gameState*	state
        -: 1512: * 		int		bonus					Bonus amount.
        -: 1513: *
        -: 1514: * 	@pre
        -: 1515: * 		a hand for the player.
        -: 1516: *
        -: 1517: * 	@post
        -: 1518: * 		update state->coins to equal the number of coins in the player's hand.
        -: 1519: *
        -: 1520: * 	@return
        -: 1521: * 		none.
        -: 1522: */
function updateCoins called 5213 returned 100% blocks executed 100%
     5213: 1523:int updateCoins(int player, struct gameState *state, int bonus)
     5213: 1523-block  0
        -: 1524:{
        -: 1525:	int i;
        -: 1526:
        -: 1527:	//reset coin count
     5213: 1528:	state->coins = 0;
        -: 1529:
        -: 1530:	//add coins for each Treasure card in player's hand
   203758: 1531:	for (i = 0; i < state->handCount[player]; i++)
     5213: 1531-block  0
unconditional  0 taken 5213
   198545: 1531-block  1
unconditional  1 taken 198545
   203758: 1531-block  2
branch  2 taken 198545
branch  3 taken 5213 (fallthrough)
        -: 1532:	{
   198545: 1533:		if (state->hand[player][i] == copper)
   198545: 1533-block  0
branch  0 taken 56854 (fallthrough)
branch  1 taken 141691
        -: 1534:		{
    56854: 1535:			state->coins += 1;
    56854: 1535-block  0
unconditional  0 taken 56854
        -: 1536:		}
   141691: 1537:		else if (state->hand[player][i] == silver)
   141691: 1537-block  0
branch  0 taken 46350 (fallthrough)
branch  1 taken 95341
        -: 1538:		{
    46350: 1539:			state->coins += 2;
    46350: 1539-block  0
unconditional  0 taken 46350
        -: 1540:		}
    95341: 1541:		else if (state->hand[player][i] == gold)
    95341: 1541-block  0
branch  0 taken 46370 (fallthrough)
branch  1 taken 48971
        -: 1542:		{
    46370: 1543:			state->coins += 3;
    46370: 1543-block  0
unconditional  0 taken 46370
        -: 1544:		}	
        -: 1545:	}	
        -: 1546:
        -: 1547:	//add bonus
     5213: 1548:	state->coins += bonus;
        -: 1549:
     5213: 1550:	return 0;
     5213: 1550-block  0
unconditional  0 taken 5213
        -: 1551:}
        -: 1552:
        -: 1553:
        -: 1554://end of dominion.c
        -: 1555:
